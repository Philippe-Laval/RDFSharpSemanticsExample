<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RDFSharp</name>
    </assembly>
    <members>
        <member name="T:RDFSharp.Model.RDFCollection">
            <summary>
            RDFCollection represents a generic collection in the RDF model.
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFCollection.ItemType">
            <summary>
            Type of the items of the collection
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFCollection.ReificationSubject">
            <summary>
            Subject of the collection's reification
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFCollection.InternalReificationSubject">
            <summary>
            Internal subject of the collection's reification
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFCollection.ItemsCount">
            <summary>
            Count of the collection's items
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFCollection.ItemsEnumerator">
            <summary>
            Gets the enumerator on the collection's items for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFCollection.Items">
            <summary>
            List of the items collected by the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollection.#ctor(RDFSharp.Model.RDFModelEnums.RDFItemTypes)">
            <summary>
            Default ctor to build an empty collection of the given type
            (initial configuration of the collection is "rdf:Nil")
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollection.System#Collections#Generic#IEnumerable{RDFSharp#Query#RDFPatternMember}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the collection's items
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the collection's items
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollection.AddItem(RDFSharp.Model.RDFResource)">
            <summary>
            Adds the given item to the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollection.AddItem(RDFSharp.Model.RDFLiteral)">
            <summary>
            Adds the given item to the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollection.RemoveItem(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the given item from the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollection.RemoveItem(RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the given item from the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollection.ClearItems">
            <summary>
            Removes all the items from the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollection.ReifyCollection">
            <summary>
            Builds the reification graph of the collection
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFContainer">
            <summary>
            RDFContainer represents a generic container in the RDF model.
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFContainer.ContainerType">
            <summary>
            Type of the container
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFContainer.ItemType">
            <summary>
            Type of the items of the container
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFContainer.ReificationSubject">
            <summary>
            Subject of the container's reification
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFContainer.ItemsCount">
            <summary>
            Count of the container's items
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFContainer.ItemsEnumerator">
            <summary>
            Gets the enumerator on the container's items for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFContainer.Items">
            <summary>
            List of the items contained in the container
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFContainer.#ctor(RDFSharp.Model.RDFModelEnums.RDFContainerTypes,RDFSharp.Model.RDFModelEnums.RDFItemTypes)">
            <summary>
            Default ctor to build an empty container of the given flavor and given type
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFContainer.System#Collections#Generic#IEnumerable{RDFSharp#Query#RDFPatternMember}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the container's items
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFContainer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the container's items
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFContainer.AddItem(RDFSharp.Model.RDFResource)">
            <summary>
            Adds the given item to the container
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFContainer.AddItem(RDFSharp.Model.RDFLiteral)">
            <summary>
            Adds the given item to the container
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFContainer.RemoveItem(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the given item from the container
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFContainer.RemoveItem(RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the given item from the container
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFContainer.ClearItems">
            <summary>
            Removes all the items from the container
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFContainer.ReifyContainer">
            <summary>
            Builds the reification graph of the container:
            Subject -> rdf:type -> [rdf:Bag|rdf:Seq|rdf:Alt] 
            Subject -> rdf:_N   -> RDFContainer.ITEM(N)
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFDataSource">
            <summary>
            RDFDataSource is the foundation class for modeling RDF data sources
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFDataSource.IsGraph">
            <summary>
            Checks if this data source is a graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFDataSource.IsStore">
            <summary>
            Checks if this data source is a store
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFDataSource.IsFederation">
            <summary>
            Checks if this data source is a federation
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFGraph">
            <summary>
            RDFGraph represents a graph in the RDF model.
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraph.Context">
            <summary>
            Uri of the graph
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraph.TriplesCount">
            <summary>
            Count of the graph's triples
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraph.TriplesEnumerator">
            <summary>
            Gets the enumerator on the graph's triples for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraph.GraphIndex">
            <summary>
            Index on the triples of the graph
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraph.Triples">
            <summary>
            List of triples embedded into the graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.#ctor">
            <summary>
            Builds an empty graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.#ctor(System.Collections.Generic.List{RDFSharp.Model.RDFTriple})">
            <summary>
            Builds a graph with the given list of triples
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.ToString">
            <summary>
            Gives the string representation of the graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.Equals(RDFSharp.Model.RDFGraph)">
            <summary>
            Performs the equality comparison between two graphs
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.System#Collections#Generic#IEnumerable{RDFSharp#Model#RDFTriple}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the graph's triples
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the graph's triples
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.SetContext(System.Uri)">
            <summary>
            Sets the context of the graph to the given Uri (null or blank-node Uris are not accepted)
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.AddTriple(RDFSharp.Model.RDFTriple)">
            <summary>
            Adds the given triple to the graph, avoiding duplicate insertions
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.AddContainer(RDFSharp.Model.RDFContainer)">
            <summary>
            Adds the given container to the graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.AddCollection(RDFSharp.Model.RDFCollection)">
            <summary>
            Adds the given collection to the graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.RemoveTriple(RDFSharp.Model.RDFTriple)">
            <summary>
            Removes the given triple from the graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.RemoveTriplesBySubject(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the triples with the given subject
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.RemoveTriplesByPredicate(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the triples with the given predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.RemoveTriplesByObject(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the triples with the given resource as object
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.RemoveTriplesByLiteral(RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the triples with the given literal as object
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.RemoveTriplesBySubjectPredicate(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the triples with the given subject and predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.RemoveTriplesBySubjectObject(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the triples with the given subject and object
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.RemoveTriplesBySubjectLiteral(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the triples with the given subject and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.RemoveTriplesByPredicateObject(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the triples with the given predicate and object
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.RemoveTriplesByPredicateLiteral(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the triples with the given predicate and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.ClearTriples">
            <summary>
            Clears the triples and metadata of the graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.UnreifyTriples">
            <summary>
            Compacts the reified triples by removing their 4 standard statements
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.ContainsTriple(RDFSharp.Model.RDFTriple)">
            <summary>
            Checks if the graph contains the given triple
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.SelectTriplesBySubject(RDFSharp.Model.RDFResource)">
            <summary>
            Gets the subgraph containing triples with the specified resource as subject 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.SelectTriplesByPredicate(RDFSharp.Model.RDFResource)">
            <summary>
            Gets the subgraph containing triples with the specified resource as predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.SelectTriplesByObject(RDFSharp.Model.RDFResource)">
            <summary>
            Gets the subgraph containing triples with the specified resource as object 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.SelectTriplesByLiteral(RDFSharp.Model.RDFLiteral)">
            <summary>
            Gets the subgraph containing triples with the specified literal as object 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.IntersectWith(RDFSharp.Model.RDFGraph)">
            <summary>
            Builds a new intersection graph from this graph and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.UnionWith(RDFSharp.Model.RDFGraph)">
            <summary>
            Builds a new union graph from this graph and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.DifferenceWith(RDFSharp.Model.RDFGraph)">
            <summary>
            Builds a new difference graph from this graph and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.ToFile(RDFSharp.Model.RDFModelEnums.RDFFormats,System.String)">
            <summary>
            Writes the graph into a file in the given RDF format. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.ToStream(RDFSharp.Model.RDFModelEnums.RDFFormats,System.IO.Stream)">
            <summary>
            Writes the graph into a stream in the given RDF format. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.ToDataTable">
            <summary>
            Writes the graph into a datatable with "Subject-Predicate-Object" columns
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.FromFile(RDFSharp.Model.RDFModelEnums.RDFFormats,System.String)">
            <summary>
            Creates a graph from a file of the given RDF format. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.FromStream(RDFSharp.Model.RDFModelEnums.RDFFormats,System.IO.Stream)">
            <summary>
            Creates a graph from a stream of the given RDF format. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.FromDataTable(System.Data.DataTable)">
            <summary>
            Creates a graph from a datatable with "Subject-Predicate-Object" columns.
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFGraphIndex">
            <summary>
            RDFGraphIndex represents an automatically managed in-memory index structure for the triples of a graph.
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraphIndex.Subjects">
            <summary>
            Index on the subjects of the graph's triples
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraphIndex.Predicates">
            <summary>
            Index on the predicates of the graph's triples
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraphIndex.Objects">
            <summary>
            Index on the objects of the graph's triples
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraphIndex.Literals">
            <summary>
            Index on the literals of the graph's triples
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphIndex.#ctor">
            <summary>
            Default-ctor for an empty graph index
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphIndex.AddIndex(RDFSharp.Model.RDFTriple)">
            <summary>
            Adds the given triple to the SPOL index
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphIndex.RemoveIndex(RDFSharp.Model.RDFTriple)">
            <summary>
            Removes the given triple from the SPOL index
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphIndex.ClearIndex">
            <summary>
            Clears the index
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphIndex.SelectIndexBySubject(RDFSharp.Model.RDFResource)">
            <summary>
            Selects the triples indexed by the given subject
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphIndex.SelectIndexByPredicate(RDFSharp.Model.RDFResource)">
            <summary>
            Selects the triples indexed by the given predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphIndex.SelectIndexByObject(RDFSharp.Model.RDFResource)">
            <summary>
            Selects the triples indexed by the given object
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphIndex.SelectIndexByLiteral(RDFSharp.Model.RDFLiteral)">
            <summary>
            Selects the triples indexed by the given literal
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFLiteral">
            <summary>
            RDFLiteral represents a generic literal in the RDF model.
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFLiteral.Value">
            <summary>
            Value of the literal
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFLiteral.ToString">
            <summary>
            Gives the string representation of the literal
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelEnums">
            <summary>
            RDFModelEnums represents a collector for all the enumerations used by the "RDFSharp.Model" namespace
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelEnums.RDFFormats">
            <summary>
            RDFFormats represents an enumeration for supported RDF graph serialization data formats.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFFormats.NTriples">
            <summary>
            N-Triples serialization
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFFormats.Turtle">
            <summary>
            Turtle serialization
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFFormats.TriX">
            <summary>
            TriX serialization
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFFormats.RdfXml">
            <summary>
            XML serialization
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelEnums.RDFTripleFlavors">
            <summary>
            RDFTripleFlavors represents an enumeration for possible triple pattern flavors.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFTripleFlavors.SPO">
            <summary>
            Indicates that the object of the triple is a resource
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFTripleFlavors.SPL">
            <summary>
            Indicates that the object of the triple is a literal
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFTripleFlavors.SPV">
            <summary>
            Indicates that the object of the triple is a variable
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelEnums.RDFDatatypes">
            <summary>
            RDFDatatypes represents an enumeration for supported datatypes (RDF/RDFS/XSD).
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.RDFS_LITERAL">
            <summary>
            http://www.w3.org/2000/01/rdf-schema#Literal
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.RDF_XMLLITERAL">
            <summary>
            http://www.w3.org/1999/02/22-rdf-syntax-ns#XMLLiteral
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_STRING">
            <summary>
            http://www.w3.org/2001/XMLSchema#string
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_BOOLEAN">
            <summary>
            http://www.w3.org/2001/XMLSchema#boolean
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_DECIMAL">
            <summary>
            http://www.w3.org/2001/XMLSchema#decimal
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_FLOAT">
            <summary>
            http://www.w3.org/2001/XMLSchema#float
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_DOUBLE">
            <summary>
            http://www.w3.org/2001/XMLSchema#double
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_POSITIVEINTEGER">
            <summary>
            http://www.w3.org/2001/XMLSchema#positiveInteger
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_NEGATIVEINTEGER">
            <summary>
            http://www.w3.org/2001/XMLSchema#negativeInteger
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_NONPOSITIVEINTEGER">
            <summary>
            http://www.w3.org/2001/XMLSchema#nonPositiveInteger
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_NONNEGATIVEINTEGER">
            <summary>
            http://www.w3.org/2001/XMLSchema#nonNegativeInteger
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_INTEGER">
            <summary>
            http://www.w3.org/2001/XMLSchema#integer
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_LONG">
            <summary>
            http://www.w3.org/2001/XMLSchema#long
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_INT">
            <summary>
            http://www.w3.org/2001/XMLSchema#int
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_SHORT">
            <summary>
            http://www.w3.org/2001/XMLSchema#short
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_BYTE">
            <summary>
            http://www.w3.org/2001/XMLSchema#byte
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_UNSIGNEDLONG">
            <summary>
            http://www.w3.org/2001/XMLSchema#unsignedLong
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_UNSIGNEDINT">
            <summary>
            http://www.w3.org/2001/XMLSchema#unsignedInt
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_UNSIGNEDSHORT">
            <summary>
            http://www.w3.org/2001/XMLSchema#unsignedShort
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_UNSIGNEDBYTE">
            <summary>
            http://www.w3.org/2001/XMLSchema#unsignedByte
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_DURATION">
            <summary>
            http://www.w3.org/2001/XMLSchema#duration
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_DATETIME">
            <summary>
            http://www.w3.org/2001/XMLSchema#dateTime
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_DATE">
            <summary>
            http://www.w3.org/2001/XMLSchema#date
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_TIME">
            <summary>
            http://www.w3.org/2001/XMLSchema#time
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_GYEAR">
            <summary>
            http://www.w3.org/2001/XMLSchema#gYear
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_GMONTH">
            <summary>
            http://www.w3.org/2001/XMLSchema#gMonth
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_GDAY">
            <summary>
            http://www.w3.org/2001/XMLSchema#gDay
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_GYEARMONTH">
            <summary>
            http://www.w3.org/2001/XMLSchema#gYearMonth
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_GMONTHDAY">
            <summary>
            http://www.w3.org/2001/XMLSchema#gMonthDay
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_HEXBINARY">
            <summary>
            http://www.w3.org/2001/XMLSchema#hexBinary
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_BASE64BINARY">
            <summary>
            http://www.w3.org/2001/XMLSchema#base64Binary
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_ANYURI">
            <summary>
            http://www.w3.org/2001/XMLSchema#anyURI
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_QNAME">
            <summary>
            http://www.w3.org/2001/XMLSchema#QName
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_NOTATION">
            <summary>
            http://www.w3.org/2001/XMLSchema#NOTATION
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_LANGUAGE">
            <summary>
            http://www.w3.org/2001/XMLSchema#language
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_NORMALIZEDSTRING">
            <summary>
            http://www.w3.org/2001/XMLSchema#normalizedString
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_TOKEN">
            <summary>
            http://www.w3.org/2001/XMLSchema#token
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_NMTOKEN">
            <summary>
            http://www.w3.org/2001/XMLSchema#NMToken
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_NAME">
            <summary>
            http://www.w3.org/2001/XMLSchema#Name
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_NCNAME">
            <summary>
            http://www.w3.org/2001/XMLSchema#NCName
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_ID">
            <summary>
            http://www.w3.org/2001/XMLSchema#ID
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelEnums.RDFContainerTypes">
            <summary>
            RDFContainerTypes represents an enumeration for supported container types.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFContainerTypes.Bag">
            <summary>
            Represents an unordered list which allows duplicates
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFContainerTypes.Seq">
            <summary>
            Represents an ordered list which allows duplicates
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFContainerTypes.Alt">
            <summary>
            Represents an unordered list which does not allow duplicates
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelEnums.RDFItemTypes">
            <summary>
            RDFItemTypes represents an enumeration for acceptable RDFContainer and RDFCollection item types.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFItemTypes.Resource">
            <summary>
            Indicates that a container/collection accepts only resources
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFItemTypes.Literal">
            <summary>
            Indicates that a container/collection accepts only literals
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelEvents">
            <summary>
            RDFModelEvents represents a collector for all the events generated within the "RDFSharp.Model" namespace
            </summary>
        </member>
        <member name="E:RDFSharp.Model.RDFModelEvents.OnTripleAdded">
            <summary>
            Event representing an information message generated when a triple has been added to a graph
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelEvents.RDFOnTripleAddedEventHandler">
            <summary>
            Delegate to handle information events generated when a triple has been added to a graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelEvents.RaiseOnTripleAdded(System.String)">
            <summary>
            Internal invoker of the subscribed information event handler
            </summary>
        </member>
        <member name="E:RDFSharp.Model.RDFModelEvents.OnTripleRemoved">
            <summary>
            Event representing an information message generated when a triple has been removed from a graph
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelEvents.RDFOnTripleRemovedEventHandler">
            <summary>
            Delegate to handle information events generated when a triple has been removed from a graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelEvents.RaiseOnTripleRemoved(System.String)">
            <summary>
            Internal invoker of the subscribed information event handler
            </summary>
        </member>
        <member name="E:RDFSharp.Model.RDFModelEvents.OnGraphCleared">
            <summary>
            Event representing an information message generated when a graph has been cleared
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelEvents.RDFOnGraphClearedEventHandler">
            <summary>
            Delegate to handle information events generated when a graph has been cleared
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelEvents.RaiseOnGraphCleared(System.String)">
            <summary>
            Internal invoker of the subscribed information event handler
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelException">
            <summary>
            RDFModelException represents an exception thrown during manipulation of RDF data models.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelException.#ctor">
            <summary>
            Basic ctor to throw an empty RDFModelException
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelException.#ctor(System.String)">
            <summary>
            Basic ctor to throw an RDFModelException with message
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelException.#ctor(System.String,System.Exception)">
            <summary>
            Basic ctor to throw an RDFModelException with message and inner exception
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Basic ctor to support serialization of a remotely thrown RDFModelException
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelUtilities">
            <summary>
            RDFModelUtilities is a collector of reusable utility methods for RDF model management
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.CreateHash(System.String)">
            <summary>
            Performs MD5 hash calculation of the given string
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelUtilities.regexU8">
            <summary>
            Regex to catch 8-byte unicodes
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelUtilities.regexU4">
            <summary>
            Regex to catch 4-byte unicodes
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.GetUriFromString(System.String)">
            <summary>
            Gets the Uri corresponding to the given string
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.ASCII_To_Unicode(System.String)">
            <summary>
            Turns back ASCII-encoded Unicodes into Unicodes. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.Unicode_To_ASCII(System.String)">
            <summary>
            Turns Unicodes into ASCII-encoded Unicodes. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.EscapeControlCharsForXML(System.String)">
            <summary>
            Replaces character controls for XML compatibility
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.TrimEnd(System.String,System.String)">
            <summary>
            Trims the end of the given source string searching for the given value
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.SelectTriples(RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Selects the triples corresponding to the given pattern from the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.GetGraphNamespaces(RDFSharp.Model.RDFGraph)">
            <summary>
            Gets the list of namespaces used within the triples of the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.GetDatatypeFromString(System.String)">
            <summary>
            Parse the given string in order to give the corresponding RDF/RDFS/XSD datatype
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.GetDatatypeFromEnum(RDFSharp.Model.RDFModelEnums.RDFDatatypes)">
            <summary>
            Gives the string representation of the given RDF/RDFS/XSD datatype
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.ValidateTypedLiteral(RDFSharp.Model.RDFTypedLiteral)">
            <summary>
            Validates the value of the given typed literal against its datatype
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFNamespace">
            <summary>
            RDFNamespace represents a generic namespace in the RDF model.
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNamespace.NamespaceID">
            <summary>
            Unique representation of the namespace
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNamespace.IsTemporary">
            <summary>
            Flag indicating that the namespace is temporary
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNamespace.NamespacePrefix">
            <summary>
            Prefix representation of the namespace
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNamespace.NamespaceUri">
            <summary>
            Uri representation of the namespace
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespace.#ctor(System.String,System.String)">
            <summary>
            Builds a namespace with given prefix and Uri
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespace.ToString">
            <summary>
            Gives the string representation of the namespace
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespace.Equals(RDFSharp.Model.RDFNamespace)">
            <summary>
            Performs the equality comparison between two namespaces
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespace.SetTemporary(System.Boolean)">
            <summary>
            Sets this namespace as temporary, depending on the given flag
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFNamespaceRegister">
            <summary>
            RDFNamespaceRegister is a singleton container for registered RDF namespaces.
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNamespaceRegister.DefaultNamespace">
            <summary>
            Default namespace of the library
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNamespaceRegister.Instance">
            <summary>
            Singleton instance of the RDFNamespaceRegister class
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNamespaceRegister.Register">
            <summary>
            List of registered namespaces
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNamespaceRegister.NamespacesCount">
            <summary>
            Count of the register's namespaces
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNamespaceRegister.NamespacesEnumerator">
            <summary>
            Gets the enumerator on the register's namespaces for iteration
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.#cctor">
            <summary>
            Default-ctor to initialize the singleton instance of the register
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.System#Collections#Generic#IEnumerable{RDFSharp#Model#RDFNamespace}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the register's namespaces
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the register's namespaces
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.SetDefaultNamespace(RDFSharp.Model.RDFNamespace)">
            <summary>
            Sets the given namespace as default namespace of the library.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.AddNamespace(RDFSharp.Model.RDFNamespace)">
            <summary>
            Adds the given namespace to the register, if it has unique prefix and uri.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.RemoveByUri(System.String)">
            <summary>
            Removes the namespace having the given Uri.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.RemoveByPrefix(System.String)">
            <summary>
            Removes the namespace having the given prefix.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.GetByUri(System.String,System.Boolean)">
            <summary>
            Retrieves a namespace by seeking presence of its Uri.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.GetByPrefix(System.String,System.Boolean)">
            <summary>
            Retrieves a namespace by seeking presence of its prefix.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.LookupPrefixCC(System.String,System.Int32)">
            <summary>
            Looksup the given prefix or namespace into the prefix.cc service
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.RemoveTemporaryNamespaces">
            <summary>
            Removes namespaces marked as temporary
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFPlainLiteral">
            <summary>
            RDFPlainLiteral represents a RDFLiteral which can be denoted by a Language.
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFPlainLiteral.Language">
            <summary>
            Optional language of the plain literal
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFPlainLiteral.#ctor(System.String)">
            <summary>
            Default-ctor to build a plain literal without language
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFPlainLiteral.#ctor(System.String,System.String)">
            <summary>
            Default-ctor to build a plain literal with language
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFPlainLiteral.ToString">
            <summary>
            Gives the string representation of the plain literal
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFResource">
            <summary>
            RDFResource represents a generic resource in the RDF model.
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFResource.URI">
            <summary>
            Uri of the resource
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFResource.IsBlank">
            <summary>
            Flag indicating the resource is blank or not
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFResource.#ctor">
            <summary>
            Builds a blank resource
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFResource.#ctor(System.String)">
            <summary>
            Builds a non-blank resource (if starting with "_:" or "bnode:", it builds a blank resource) 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFResource.ToString">
            <summary>
            Gives the string representation of the resource
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFTriple">
            <summary>
            RDFTriple represents a triple in the RDF model.
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFTriple.TripleID">
            <summary>
            Unique representation of the triple
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFTriple.TripleFlavor">
            <summary>
            Flavor of the triple
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFTriple.Subject">
            <summary>
            Member acting as subject token of the triple
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFTriple.Predicate">
            <summary>
            Member acting as predicate token of the triple
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFTriple.Object">
            <summary>
            Member acting as object token of the triple
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFTriple.ReificationSubject">
            <summary>
            Subject of the triple's reification
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTriple.#ctor(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            SPO-flavor ctor
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTriple.#ctor(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            SPL-flavor ctor
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTriple.ToString">
            <summary>
            Gives the string representation of the triple
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTriple.Equals(RDFSharp.Model.RDFTriple)">
            <summary>
            Performs the equality comparison between two triples
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTriple.ReifyTriple">
            <summary>
            Builds the reification graph of the triple
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFTypedLiteral">
            <summary>
            RDFTypedLiteral represents a RDFLiteral which is denoted by a Datatype.
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFTypedLiteral.Datatype">
            <summary>
            Mandatory datatype of the typed literal
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTypedLiteral.#ctor(System.String,RDFSharp.Model.RDFModelEnums.RDFDatatypes)">
            <summary>
            Default-ctor to build a typed literal with given value and given datatype. 
            Semantic validation of given value against given datatype is performed.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTypedLiteral.ToString">
            <summary>
            Gives the string representation of the typed literal
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTypedLiteral.HasBooleanDatatype">
            <summary>
            Checks if the datatype of this typed literal is compatible with boolean
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTypedLiteral.HasDatetimeDatatype">
            <summary>
            Checks if the datatype of this typed literal is compatible with datetime
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTypedLiteral.HasTimespanDatatype">
            <summary>
            Checks if the datatype of this typed literal is compatible with timespan
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTypedLiteral.HasStringDatatype">
            <summary>
            Checks if the datatype of this typed literal is compatible with string
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTypedLiteral.HasDecimalDatatype">
            <summary>
            Checks if the datatype of this typed literal is compatible with decimal
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary">
            <summary>
            RDFVocabulary is an helper for handy usage of supported RDF vocabularies.
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.RDF">
            <summary>
            RDF represents the RDF vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.PREFIX">
            <summary>
            rdf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.BASE_URI">
            <summary>
            http://www.w3.org/1999/02/22-rdf-syntax-ns#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.BAG">
            <summary>
            rdf:Bag
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.SEQ">
            <summary>
            rdf:Seq
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.ALT">
            <summary>
            rdf:Alt
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.STATEMENT">
            <summary>
            rdf:Statement
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.PROPERTY">
            <summary>
            rdf:Property
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.XML_LITERAL">
            <summary>
            rdf:XMLLiteral
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.LIST">
            <summary>
            rdf:List
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.NIL">
            <summary>
            rdf:nil
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.LI">
            <summary>
            rdf:li
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.SUBJECT">
            <summary>
            rdf:subject
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.PREDICATE">
            <summary>
            rdf:predicate
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.OBJECT">
            <summary>
            rdf:object
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.TYPE">
            <summary>
            rdf:type
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.VALUE">
            <summary>
            rdf:value
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.FIRST">
            <summary>
            rdf:first
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.REST">
            <summary>
            rdf:rest
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.RDFS">
            <summary>
            RDFS represents the RDFS vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.PREFIX">
            <summary>
            rdfs
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.BASE_URI">
            <summary>
            http://www.w3.org/2000/01/rdf-schema#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.RESOURCE">
            <summary>
            rdfs:Resource
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.CLASS">
            <summary>
            rdfs:Class
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.LITERAL">
            <summary>
            rdfs:Literal
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.CONTAINER">
            <summary>
            rdfs:Container
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.DATATYPE">
            <summary>
            rdfs:Datatype
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.CONTAINER_MEMBERSHIP_PROPERTY">
            <summary>
            rdfs:ContainerMembershipProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.RANGE">
            <summary>
            rdfs:range
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.DOMAIN">
            <summary>
            rdfs:domain
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.SUB_CLASS_OF">
            <summary>
            rdfs:subClassOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.SUB_PROPERTY_OF">
            <summary>
            rdfs:subPropertyOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.LABEL">
            <summary>
            rdfs:label
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.COMMENT">
            <summary>
            rdfs:comment
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.MEMBER">
            <summary>
            rdfs:member
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.SEE_ALSO">
            <summary>
            rdfs:seeAlso
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.IS_DEFINED_BY">
            <summary>
            rdfs:isDefinedBy
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.XSD">
            <summary>
            XSD represents the XSD vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.PREFIX">
            <summary>
            xsd
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.BASE_URI">
            <summary>
            http://www.w3.org/2001/XMLSchema#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.STRING">
            <summary>
            xsd:string
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.BOOLEAN">
            <summary>
            xsd:boolean
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.DECIMAL">
            <summary>
            xsd:decimal
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.FLOAT">
            <summary>
            xsd:float
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.DOUBLE">
            <summary>
            xsd:double
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.POSITIVE_INTEGER">
            <summary>
            xsd:positiveInteger
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.NEGATIVE_INTEGER">
            <summary>
            xsd:negativeInteger
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.NON_POSITIVE_INTEGER">
            <summary>
            xsd:nonPositiveInteger
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.NON_NEGATIVE_INTEGER">
            <summary>
            xsd:nonNegativeInteger
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.INTEGER">
            <summary>
            xsd:integer
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.LONG">
            <summary>
            xsd:long
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.UNSIGNED_LONG">
            <summary>
            xsd:unsignedLong
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.INT">
            <summary>
            xsd:int
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.UNSIGNED_INT">
            <summary>
            xsd:unsignedInt
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.SHORT">
            <summary>
            xsd:short
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.UNSIGNED_SHORT">
            <summary>
            xsd:unsignedShort
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.BYTE">
            <summary>
            xsd:byte
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.UNSIGNED_BYTE">
            <summary>
            xsd:unsignedByte
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.DURATION">
            <summary>
            xsd:duration
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.DATETIME">
            <summary>
            xsd:dateTime
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.TIME">
            <summary>
            xsd:time
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.DATE">
            <summary>
            xsd:date
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.G_YEAR_MONTH">
            <summary>
            xsd:gYearMonth
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.G_YEAR">
            <summary>
            xsd:gYear
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.G_MONTH">
            <summary>
            xsd:gMonth
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.G_MONTH_DAY">
            <summary>
            xsd:gMonthDay
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.G_DAY">
            <summary>
            xsd:gDay
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.HEX_BINARY">
            <summary>
            xsd:hexBinary
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.BASE64_BINARY">
            <summary>
            xsd:base64Binary
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.ANY_URI">
            <summary>
            xsd:anyURI
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.QNAME">
            <summary>
            xsd:QName
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.NOTATION">
            <summary>
            xsd:NOTATION
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.LANGUAGE">
            <summary>
            xsd:language
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.NORMALIZED_STRING">
            <summary>
            xsd:normalizedString
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.TOKEN">
            <summary>
            xsd:token
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.NMTOKEN">
            <summary>
            xsd:NMToken
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.NAME">
            <summary>
            xsd:Name
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.NCNAME">
            <summary>
            xsd:NCName
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.ID">
            <summary>
            xsd:ID
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.OWL">
            <summary>
            OWL represents the OWL vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.PREFIX">
            <summary>
            owl
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.BASE_URI">
            <summary>
            http://www.w3.org/2002/07/owl#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ONTOLOGY">
            <summary>
            owl:Ontology
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.IMPORTS">
            <summary>
            owl:imports
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.CLASS">
            <summary>
            owl:Class
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.INDIVIDUAL">
            <summary>
            owl:Individual
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.THING">
            <summary>
            owl:Thing
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.NOTHING">
            <summary>
            owl:Nothing
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.RESTRICTION">
            <summary>
            owl:Restriction
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ON_PROPERTY">
            <summary>
            owl:onProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.EQUIVALENT_CLASS">
            <summary>
            owl:equivalentClass
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.DEPRECATED_CLASS">
            <summary>
            owl:DeprecatedClass
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.EQUIVALENT_PROPERTY">
            <summary>
            owl:equivalentProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.DEPRECATED_PROPERTY">
            <summary>
            owl:DeprecatedProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.INVERSE_OF">
            <summary>
            owl:inverseOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.DATATYPE_PROPERTY">
            <summary>
            owl:DatatypeProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.OBJECT_PROPERTY">
            <summary>
            owl:ObjectProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.TRANSITIVE_PROPERTY">
            <summary>
            owl:TransitiveProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.SYMMETRIC_PROPERTY">
            <summary>
            owl:SymmetricProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.FUNCTIONAL_PROPERTY">
            <summary>
            owl:FunctionalProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.INVERSE_FUNCTIONAL_PROPERTY">
            <summary>
            owl:InverseFunctionalProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ANNOTATION_PROPERTY">
            <summary>
            owl:AnnotationProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ONTOLOGY_PROPERTY">
            <summary>
            owl:OntologyProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ALL_VALUES_FROM">
            <summary>
            owl:allValuesFrom
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.SOME_VALUES_FROM">
            <summary>
            owl:someValuesFrom
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.HAS_VALUE">
            <summary>
            owl:hasValue
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.MIN_CARDINALITY">
            <summary>
            owl:minCardinality
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.MAX_CARDINALITY">
            <summary>
            owl:maxCardinality
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.CARDINALITY">
            <summary>
            owl:cardinality
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.SAME_AS">
            <summary>
            owl:sameAs
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.DIFFERENT_FROM">
            <summary>
            owl:differentFrom
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ALL_DIFFERENT">
            <summary>
            owl:AllDifferent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.DISTINCT_MEMBERS">
            <summary>
            owl:distinctMembers
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.INTERSECTION_OF">
            <summary>
            owl:intersectionOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.UNION_OF">
            <summary>
            owl:unionOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.COMPLEMENT_OF">
            <summary>
            owl:complementOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ONE_OF">
            <summary>
            owl:oneOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.DATA_RANGE">
            <summary>
            owl:DataRange
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.BACKWARD_COMPATIBLE_WITH">
            <summary>
            owl:backwardCompatibleWith
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.INCOMPATIBLE_WITH">
            <summary>
            owl:incompatibleWith
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.DISJOINT_WITH">
            <summary>
            owl:disjointWith
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.PRIOR_VERSION">
            <summary>
            owl:priorVersion
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.VERSION_INFO">
            <summary>
            owl:versionInfo
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.VERSION_IRI">
            <summary>
            owl:versionIRI
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.XML">
            <summary>
            XML represents the XML vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XML.PREFIX">
            <summary>
            xml
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XML.BASE_URI">
            <summary>
            http://www.w3.org/XML/1998/namespace
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XML.LANG">
            <summary>
            xml:lang
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XML.BASE">
            <summary>
            xml:base
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.DC">
            <summary>
            DC represents the Dublin Core vocabulary (with DCAM, DCTERMS and DCTYPE extensions).
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.PREFIX">
            <summary>
            dc
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.BASE_URI">
            <summary>
            http://purl.org/dc/elements/1.1/
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.CONTRIBUTOR">
            <summary>
            dc:contributor
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.COVERAGE">
            <summary>
            dc:coverage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.CREATOR">
            <summary>
            dc:creator
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DATE">
            <summary>
            dc:date
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DESCRIPTION">
            <summary>
            dc:description
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.FORMAT">
            <summary>
            dc:format
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.IDENTIFIER">
            <summary>
            dc:identifier
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.LANGUAGE">
            <summary>
            dc:language
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.PUBLISHER">
            <summary>
            dc:publisher
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.RELATION">
            <summary>
            dc:relation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.RIGHTS">
            <summary>
            dc:rights
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.SOURCE">
            <summary>
            dc:source
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.SUBJECT">
            <summary>
            dc:subject
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.TITLE">
            <summary>
            dc:title
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.TYPE">
            <summary>
            dc:type
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.DC.DCAM">
            <summary>
            DCAM extensions
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCAM.PREFIX">
            <summary>
            dcam
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCAM.BASE_URI">
            <summary>
            http://purl.org/dc/dcam/
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCAM.MEMBER_OF">
            <summary>
            dcam:memberOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCAM.VOCABULARY_ENCODING_SCHEME">
            <summary>
            dcam:VocabularyEncodingScheme
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.DC.DCTERMS">
            <summary>
            DCTERMS extensions
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.PREFIX">
            <summary>
            dcterms
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.BASE_URI">
            <summary>
            http://purl.org/dc/terms/
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.ABSTRACT">
            <summary>
            dcterms:abstract
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.ACCESS_RIGHTS">
            <summary>
            dcterms:accessRights
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.ACCRUAL_METHOD">
            <summary>
            dcterms:accrualMethod
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.ACCRUAL_PERIODICITY">
            <summary>
            dcterms:accrualPeriodicity
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.ACCRUAL_POLICY">
            <summary>
            dcterms:accrualPolicy
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.AGENT">
            <summary>
            dcterms:Agent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.AGENT_CLASS">
            <summary>
            dcterms:AgentClass
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.ALTERNATIVE">
            <summary>
            dcterms:alternative
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.AUDIENCE">
            <summary>
            dcterms:audience
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.AVAILABLE">
            <summary>
            dcterms:available
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.BIBLIOGRAPHIC_CITATION">
            <summary>
            dcterms:bibliographicCitation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.BIBLIOGRAPHIC_RESOURCE">
            <summary>
            dcterms:BibliographicResource
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.CONFORMS_TO">
            <summary>
            dcterms:conformsTo
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.CONTRIBUTOR">
            <summary>
            dcterms:contributor
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.COVERAGE">
            <summary>
            dcterms:coverage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.CREATED">
            <summary>
            dcterms:created
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.CREATOR">
            <summary>
            dcterms:creator
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.DATE">
            <summary>
            dcterms:date
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.DATE_ACCEPTED">
            <summary>
            dcterms:dateAccepted
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.DATE_COPYRIGHTED">
            <summary>
            dcterms:dateCopyrighted
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.DATE_SUBMITTED">
            <summary>
            dcterms:dateSubmitted
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.DESCRIPTION">
            <summary>
            dcterms:description
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.EDUCATION_LEVEL">
            <summary>
            dcterms:educationLevel
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.EXTENT">
            <summary>
            dcterms:extent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.FILE_FORMAT">
            <summary>
            dcterms:FileFormat
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.FORMAT">
            <summary>
            dcterms:format
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.FREQUENCY">
            <summary>
            dcterms:Frequency
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.HAS_FORMAT">
            <summary>
            dcterms:hasFormat
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.HAS_PART">
            <summary>
            dcterms:hasPart
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.HAS_VERSION">
            <summary>
            dcterms:hasVersion
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.IDENTIFIER">
            <summary>
            dcterms:identifier
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.INSTRUCTIONAL_METHOD">
            <summary>
            dcterms:instructionalMethod
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.IS_FORMAT_OF">
            <summary>
            dcterms:isFormatOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.IS_PART_OF">
            <summary>
            dcterms:isPartOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.IS_REFERENCED_BY">
            <summary>
            dcterms:isReferencedBy
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.IS_REPLACED_BY">
            <summary>
            dcterms:isReplacedBy
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.IS_REQUIRED_BY">
            <summary>
            dcterms:isRequiredBy
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.ISSUED">
            <summary>
            dcterms:issued
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.IS_VERSION_OF">
            <summary>
            dcterms:isVersionOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.JURISDICTION">
            <summary>
            dcterms:Jurisdiction
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.LANGUAGE">
            <summary>
            dcterms:language
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.LICENSE">
            <summary>
            dcterms:license
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.LICENSE_DOCUMENT">
            <summary>
            dcterms:LicenseDocument
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.LINGUISTIC_SYSTEM">
            <summary>
            dcterms:LinguisticSystem
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.LOCATION">
            <summary>
            dcterms:Location
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.LOCATION_PERIOD_OR_JURISDICTION">
            <summary>
            dcterms:LocationPeriodOrJurisdiction
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.MEDIATOR">
            <summary>
            dcterms:mediator
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.MEDIA_TYPE">
            <summary>
            dcterms:MediaType
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.MEDIA_TYPE_OR_EXTENT">
            <summary>
            dcterms:MediaTypeOrExtent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.MEDIUM">
            <summary>
            dcterms:medium
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.METHOD_OF_ACCRUAL">
            <summary>
            dcterms:MethodOfAccrual
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.METHOD_OF_INSTRUCTION">
            <summary>
            dcterms:MethodOfInstruction
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.MODIFIED">
            <summary>
            dcterms:modified
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.PERIOD_OF_TIME">
            <summary>
            dcterms:PeriodOfTime
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.PHYSICAL_MEDIUM">
            <summary>
            dcterms:PhysicalMedium
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.PHYSICAL_RESOURCE">
            <summary>
            dcterms:PhysicalResource
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.POLICY">
            <summary>
            dcterms:Policy
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.PROVENANCE">
            <summary>
            dcterms:provenance
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.PROVENANCE_STATEMENT">
            <summary>
            dcterms:ProvenanceStatement
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.PUBLISHER">
            <summary>
            dcterms:publisher
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.REFERENCES">
            <summary>
            dcterms:references
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.RELATION">
            <summary>
            dcterms:relation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.REPLACES">
            <summary>
            dcterms:replaces
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.REQUIRES">
            <summary>
            dcterms:requires
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.RIGHTS">
            <summary>
            dcterms:rights
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.RIGHTS_STATEMENT">
            <summary>
            dcterms:RightsStatement
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.RIGHTS_HOLDER">
            <summary>
            dcterms:rightsHolder
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.SIZE_OR_DURATION">
            <summary>
            dcterms:SizeOrDuration
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.SOURCE">
            <summary>
            dcterms:source
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.SPATIAL">
            <summary>
            dcterms:spatial
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.STANDARD">
            <summary>
            dcterms:Standard
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.SUBJECT">
            <summary>
            dcterms:subject
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.TABLE_OF_CONTENTS">
            <summary>
            dcterms:tableOfContents
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.TEMPORAL">
            <summary>
            dcterms:temporal
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.TITLE">
            <summary>
            dcterms:title
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.TYPE">
            <summary>
            dcterms:type
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.VALID">
            <summary>
            dcterms:valid
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.DCMITYPE">
            <summary>
            dcterms:DCMIType
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.DDC">
            <summary>
            dcterms:DDC
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.IMT">
            <summary>
            dcterms:IMT
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.LCC">
            <summary>
            dcterms:LCC
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.LCSH">
            <summary>
            dcterms:LCSH
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.MESH">
            <summary>
            dcterms:MESH
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.NLM">
            <summary>
            dcterms:NLM
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.TGN">
            <summary>
            dcterms:TGN
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.UDC">
            <summary>
            dcterms:UDC
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.BOX">
            <summary>
            dcterms:Box
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.ISO3166">
            <summary>
            dcterms:ISO3166
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.ISO639_2">
            <summary>
            dcterms:ISO639-2
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.ISO639_3">
            <summary>
            dcterms:ISO639-3
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.PERIOD">
            <summary>
            dcterms:Period
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.POINT">
            <summary>
            dcterms:Point
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.RFC1766">
            <summary>
            dcterms:RFC1766
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.RFC3066">
            <summary>
            dcterms:RFC3066
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.RFC4646">
            <summary>
            dcterms:RFC4646
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.RFC5646">
            <summary>
            dcterms:RFC5646
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.URI">
            <summary>
            dcterms:URI
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.W3CDTF">
            <summary>
            dcterms:W3CDTF
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.DC.DCTYPE">
            <summary>
            DCTYPE extensions
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.PREFIX">
            <summary>
            dctype
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.BASE_URI">
            <summary>
            http://purl.org/dc/dcmitype/
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.COLLECTION">
            <summary>
            dctype:Collection
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.DATASET">
            <summary>
            dctype:Dataset
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.EVENT">
            <summary>
            dctype:Event
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.IMAGE">
            <summary>
            dctype:Image
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.INTERACTIVE_RESOURCE">
            <summary>
            dctype:InteractiveResource
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.MOVING_IMAGE">
            <summary>
            dctype:MovingImage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.PHYSICAL_OBJECT">
            <summary>
            dctype:PhysicalObject
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.SERVICE">
            <summary>
            dctype:Service
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.SOFTWARE">
            <summary>
            dctype:Software
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.SOUND">
            <summary>
            dctype:Sound
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.STILL_IMAGE">
            <summary>
            dctype:StillImage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.TEXT">
            <summary>
            dctype:Text
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.FOAF">
            <summary>
            FOAF represents the Friend-of-a-Friend vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PREFIX">
            <summary>
            foaf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.BASE_URI">
            <summary>
            http://xmlns.com/foaf/0.1/
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.AGENT">
            <summary>
            foaf:Agent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PERSON">
            <summary>
            foaf:Person
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.NAME">
            <summary>
            foaf:name
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.TITLE">
            <summary>
            foaf:title
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.IMG">
            <summary>
            foaf:img
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.DEPICTION">
            <summary>
            foaf:depiction
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.DEPICTS">
            <summary>
            foaf:depicts
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.FAMILY_NAME">
            <summary>
            foaf:familyName
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.GIVEN_NAME">
            <summary>
            foaf:givenName
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.KNOWS">
            <summary>
            foaf:knows
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.SKYPE_ID">
            <summary>
            foaf:skypeID
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.BASED_NEAR">
            <summary>
            foaf:based_near
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.AGE">
            <summary>
            foaf:age
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.MADE">
            <summary>
            foaf:made
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.MAKER">
            <summary>
            foaf:maker
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PRIMARY_TOPIC">
            <summary>
            foaf:primaryTopic
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.IS_PRIMARY_TOPIC_OF">
            <summary>
            foaf:isPrimaryTopicOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PROJECT">
            <summary>
            foaf:Project
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.ORGANIZATION">
            <summary>
            foaf:Organization
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.GROUP">
            <summary>
            foaf:Group
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.DOCUMENT">
            <summary>
            foaf:Document
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.IMAGE">
            <summary>
            foaf:Image
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.MEMBER">
            <summary>
            foaf:member
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.FOCUS">
            <summary>
            foaf:focus
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.FUNDED_BY">
            <summary>
            foaf:fundedBy
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.GEEK_CODE">
            <summary>
            foaf:geekcode
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.THEME">
            <summary>
            foaf:theme
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.NICK">
            <summary>
            foaf:nick
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.MBOX">
            <summary>
            foaf:mbox
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.HOMEPAGE">
            <summary>
            foaf:homepage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.WEBLOG">
            <summary>
            foaf:weblog
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.OPEN_ID">
            <summary>
            foaf:openid
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.JABBER_ID">
            <summary>
            foaf:jabberID
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.AIM_CHAT_ID">
            <summary>
            foaf:aimChatID
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.ICQ_CHAT_ID">
            <summary>
            foaf:icqChatID
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.MSN_CHAT_ID">
            <summary>
            foaf:msnChatID
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.YAHOO_CHAT_ID">
            <summary>
            foaf:yahooChatID
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.MYERS_BRIGGS">
            <summary>
            foaf:myersBriggs
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.DNA_CHECKSUM">
            <summary>
            foaf:dnaChecksum
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.MEMBERSHIP_CLASS">
            <summary>
            foaf:membershipClass
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.HOLDS_ACCOUNT">
            <summary>
            foaf:holdsAccount
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.FIRSTNAME">
            <summary>
            foaf:firstName
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.SURNAME">
            <summary>
            foaf:surname
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PLAN">
            <summary>
            foaf:plan
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.MBOX_SHA1SUM">
            <summary>
            foaf:mbox_sha1sum
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.INTEREST">
            <summary>
            foaf:interest
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.TOPIC_INTEREST">
            <summary>
            foaf:topic_interest
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.TOPIC">
            <summary>
            foaf:topic
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PAGE">
            <summary>
            foaf:page
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.WORKPLACE_HOMEPAGE">
            <summary>
            foaf:workplaceHomepage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.WORKINFO_HOMEPAGE">
            <summary>
            foaf:workinfoHomepage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.SCHOOL_HOMEPAGE">
            <summary>
            foaf:schoolHomepage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PUBLICATIONS">
            <summary>
            foaf:publications
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.CURRENT_PROJECT">
            <summary>
            foaf:currentProject
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PAST_PROJECT">
            <summary>
            foaf:pastProject
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.ACCOUNT">
            <summary>
            foaf:account
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.ONLINE_ACCOUNT">
            <summary>
            foaf:OnlineAccount
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.ONLINE_CHAT_ACCOUNT">
            <summary>
            foaf:OnlineChatAccount
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.ONLINE_ECOMMERCE_ACCOUNT">
            <summary>
            foaf:OnlineEcommerceAccount
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.ONLINE_GAMING_ACCOUNT">
            <summary>
            foaf:OnlineGamingAccount
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.ACCOUNT_NAME">
            <summary>
            foaf:accountName
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.ACCOUNT_SERVICE_HOMEPAGE">
            <summary>
            foaf:accountServiceHomepage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PERSONAL_PROFILE_DOCUMENT">
            <summary>
            foaf:PersonalProfileDocument
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.TIPJAR">
            <summary>
            foaf:tipjar
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.SHA1">
            <summary>
            foaf:sha1
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.THUMBNAIL">
            <summary>
            foaf:thumbnail
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.LOGO">
            <summary>
            foaf:logo
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PHONE">
            <summary>
            foaf:phone
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.STATUS">
            <summary>
            foaf:status
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.GENDER">
            <summary>
            foaf:gender
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.BIRTHDAY">
            <summary>
            foaf:birthday
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.GEO">
            <summary>
            GEO represents the W3C GEO vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.PREFIX">
            <summary>
            geo
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.BASE_URI">
            <summary>
            http://www.w3.org/2003/01/geo/wgs84_pos#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.LAT">
            <summary>
            geo:lat
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.LONG">
            <summary>
            geo:long
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.LAT_LONG">
            <summary>
            geo:lat_long
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.ALT">
            <summary>
            geo:alt
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.POINT">
            <summary>
            geo:Point
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.SPATIAL_THING">
            <summary>
            geo:SpatialThing
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.LOCATION">
            <summary>
            geo:location
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.SKOS">
            <summary>
            SKOS represents the W3C SKOS vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.PREFIX">
            <summary>
            skos
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.BASE_URI">
            <summary>
            http://www.w3.org/2004/02/skos/core#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.CONCEPT">
            <summary>
            skos:Concept
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.CONCEPT_SCHEME">
            <summary>
            skos:ConceptScheme
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.IN_SCHEME">
            <summary>
            skos:inScheme
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.HAS_TOP_CONCEPT">
            <summary>
            skos:hasTopConcept
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.TOP_CONCEPT_OF">
            <summary>
            skos:topConceptOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.ALT_LABEL">
            <summary>
            skos:altLabel
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.HIDDEN_LABEL">
            <summary>
            skos:hiddenLabel
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.PREF_LABEL">
            <summary>
            skos:prefLabel
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.NOTATION">
            <summary>
            skos:notation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.CHANGE_NOTE">
            <summary>
            skos:changeNote
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.DEFINITION">
            <summary>
            skos:definition
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.EXAMPLE">
            <summary>
            skos:example
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.EDITORIAL_NOTE">
            <summary>
            skos:editorialNote
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.HISTORY_NOTE">
            <summary>
            skos:historyNote
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.NOTE">
            <summary>
            skos:note
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.SCOPE_NOTE">
            <summary>
            skos:scopeNote
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.BROADER">
            <summary>
            skos:broader
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.BROADER_TRANSITIVE">
            <summary>
            skos:broaderTransitive
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.NARROWER">
            <summary>
            skos:narrower
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.NARROWER_TRANSITIVE">
            <summary>
            skos:narrowerTransitive
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.RELATED">
            <summary>
            skos:related
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.SEMANTIC_RELATION">
            <summary>
            skos:semanticRelation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.SUBJECT">
            <summary>
            skos:subject
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.COLLECTION">
            <summary>
            skos:Collection
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.ORDERED_COLLECTION">
            <summary>
            skos:OrderedCollection
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.MEMBER">
            <summary>
            skos:member
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.MEMBER_LIST">
            <summary>
            skos:memberList
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.BROAD_MATCH">
            <summary>
            skos:broadMatch
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.CLOSE_MATCH">
            <summary>
            skos:closeMatch
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.NARROW_MATCH">
            <summary>
            skos:narrowMatch
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.RELATED_MATCH">
            <summary>
            skos:relatedMatch
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.EXACT_MATCH">
            <summary>
            skos:exactMatch
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.MAPPING_RELATION">
            <summary>
            skos:mappingRelation
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.SKOS.SKOSXL">
            <summary>
            SKOS-XL extensions
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.SKOSXL.PREFIX">
            <summary>
            skosxl
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.SKOSXL.BASE_URI">
            <summary>
            http://www.w3.org/2008/05/skos-xl#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.SKOSXL.LABEL">
            <summary>
            skosxl:Label
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.SKOSXL.ALT_LABEL">
            <summary>
            skosxl:altLabel
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.SKOSXL.HIDDEN_LABEL">
            <summary>
            skosxl:hiddenLabel
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.SKOSXL.LABEL_RELATION">
            <summary>
            skosxl:labelRelation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.SKOSXL.LITERAL_FORM">
            <summary>
            skosxl:literalForm
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.SKOSXL.PREF_LABEL">
            <summary>
            skosxl:prefLabel
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.SIOC">
            <summary>
            SIOC represents the Semantically-Interlinked Online Communities vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.PREFIX">
            <summary>
            sioc
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.BASE_URI">
            <summary>
            http://rdfs.org/sioc/ns#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.COMMUNITY">
            <summary>
            sioc:Community
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.CONTAINER">
            <summary>
            sioc:Container
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.FORUM">
            <summary>
            sioc:Forum
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.ITEM">
            <summary>
            sioc:Item
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.POST">
            <summary>
            sioc:Post
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.ROLE">
            <summary>
            sioc:Role
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.SPACE">
            <summary>
            sioc:Space
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.SITE">
            <summary>
            sioc:Site
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.THREAD">
            <summary>
            sioc:Thread
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.USER_ACCOUNT">
            <summary>
            sioc:UserAccount
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.USER_GROUP">
            <summary>
            sioc:Usergroup
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.ABOUT">
            <summary>
            sioc:about
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.ACCOUNT_OF">
            <summary>
            sioc:account_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.ADDRESSED_TO">
            <summary>
            sioc:addressed_to
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.ADMINISTRATOR_OF">
            <summary>
            sioc:administrator_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.ATTACHMENT">
            <summary>
            sioc:attachment
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.AVATAR">
            <summary>
            sioc:avatar
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.CONTAINER_OF">
            <summary>
            sioc:container_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.CONTENT">
            <summary>
            sioc:content
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.CREATOR_OF">
            <summary>
            sioc:creator_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.EARLIER_VERSION">
            <summary>
            sioc:earlier_version
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.EMAIL">
            <summary>
            sioc:email
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.EMAIL_SHA1">
            <summary>
            sioc:email_sha1
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.EMBEDS_KNOWLEDGE">
            <summary>
            sioc:embeds_knowledge
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.FEED">
            <summary>
            sioc:feed
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.FOLLOWS">
            <summary>
            sioc:follows
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.FUNCTION_OF">
            <summary>
            sioc:function_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_ADMINISTRATOR">
            <summary>
            sioc:has_administrator
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_CONTAINER">
            <summary>
            sioc:has_container
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_CREATOR">
            <summary>
            sioc:has_creator
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_DISCUSSION">
            <summary>
            sioc:has_discussion
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_FUNCTION">
            <summary>
            sioc:has_function
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_HOST">
            <summary>
            sioc:has_host
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_MEMBER">
            <summary>
            sioc:has_member
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_MODERATOR">
            <summary>
            sioc:has_moderator
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_MODIFIER">
            <summary>
            sioc:has_modifier
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_OWNER">
            <summary>
            sioc:has_owner
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_PARENT">
            <summary>
            sioc:has_parent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_REPLY">
            <summary>
            sioc:has_reply
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_SCOPE">
            <summary>
            sioc:has_scope
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_SPACE">
            <summary>
            sioc:has_space
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_SUBSCRIBER">
            <summary>
            sioc:has_subscriber
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_USERGROUP">
            <summary>
            sioc:has_usergroup
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HOST_OF">
            <summary>
            sioc:host_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.ID">
            <summary>
            sioc:id
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.IP_ADDRESS">
            <summary>
            sioc:ip_address
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.LAST_ACTIVITY_DATE">
            <summary>
            sioc:last_activity_date
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.LAST_ITEM_DATE">
            <summary>
            sioc:last_item_date
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.LAST_REPLY_DATE">
            <summary>
            sioc:last_reply_date
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.LATER_VERSION">
            <summary>
            sioc:later_version
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.LATEST_VERSION">
            <summary>
            sioc:latest_version
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.LINK">
            <summary>
            sioc:link
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.LINKS_TO">
            <summary>
            sioc:links_to
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.MEMBER_OF">
            <summary>
            sioc:member_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.MODERATOR_OF">
            <summary>
            sioc:moderator_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.MODIFIER_OF">
            <summary>
            sioc:modifier_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.NAME">
            <summary>
            sioc:name
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.NEXT_BY_DATE">
            <summary>
            sioc:next_by_date
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.NEXT_VERSION">
            <summary>
            sioc:next_version
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.NOTE">
            <summary>
            sioc:note
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.NUM_AUTHORS">
            <summary>
            sioc:num_authors
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.NUM_ITEMS">
            <summary>
            sioc:num_items
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.NUM_REPLIES">
            <summary>
            sioc:num_replies
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.NUM_THREADS">
            <summary>
            sioc:num_threads
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.NUM_VIEWS">
            <summary>
            sioc:num_views
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.OWNER_OF">
            <summary>
            sioc:owner_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.PARENT_OF">
            <summary>
            sioc:parent_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.PREVIOUS_BY_DATE">
            <summary>
            sioc:previous_by_date
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.PREVIOUS_VERSION">
            <summary>
            sioc:previous_version
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.RELATED_TO">
            <summary>
            sioc:related_to
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.REPLY_OF">
            <summary>
            sioc:reply_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.SCOPE_OF">
            <summary>
            sioc:scope_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.SIBLING">
            <summary>
            sioc:sibling
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.SPACE_OF">
            <summary>
            sioc:space_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.SUBSCRIBER_OF">
            <summary>
            sioc:subscriber_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.TOPIC">
            <summary>
            sioc:topic
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.USERGROUP_OF">
            <summary>
            sioc:usergroup_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.USER">
            <summary>
            sioc:User
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.TITLE">
            <summary>
            sioc:title
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.CONTENT_ENCODED">
            <summary>
            sioc:content_ecoded
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.CREATED_AT">
            <summary>
            sioc:created_at
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.DESCRIPTION">
            <summary>
            sioc:description
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.FIRST_NAME">
            <summary>
            sioc:first_name
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.LAST_NAME">
            <summary>
            sioc:last_name
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.GROUP_OF">
            <summary>
            sioc:group_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_GROUP">
            <summary>
            sioc:has_group
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_PART">
            <summary>
            sioc:has_part
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.MODIFIED_AT">
            <summary>
            sioc:modified_at
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.PART_OF">
            <summary>
            sioc:part_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.REFERENCE">
            <summary>
            sioc:reference
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.SUBJECT">
            <summary>
            sioc:subject
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFNTriples">
            <summary>
            RDFNTriples is responsible for managing serialization to and from N-Triples data format.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNTriples.SPB">
            <summary>
            Regex to detect S->P->B form of N-Triple/N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNTriples.SPO">
            <summary>
            Regex to detect S->P->O form of N-Triple/N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNTriples.SPL_PLAIN">
            <summary>
            Regex to detect S->P->L(PLAIN) form of N-Triple/N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNTriples.SPL_PLANG">
            <summary>
            Regex to detect S->P->L(PLAIN LANGUAGE) form of N-Triple/N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNTriples.SPL_TLIT">
            <summary>
            Regex to detect S->P->L(TYPED) form of N-Triple/N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNTriples.BPB">
            <summary>
            Regex to detect B->P->B form of N-Triple/N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNTriples.BPO">
            <summary>
            Regex to detect B->P->O form of N-Triple/N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNTriples.BPL_PLAIN">
            <summary>
            Regex to detect B->P->L(PLAIN) form of N-Triple/N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNTriples.BPL_PLANG">
            <summary>
            Regex to detect B->P->L(PLAIN LANGUAGE) form of N-Triple/N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNTriples.BPL_TLIT">
            <summary>
            Regex to detect B->P->L(TYPED) form of N-Triple/N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNTriples.regexLPL">
            <summary>
            Regex to detect presence of a plain literal with language tag within a given N-Triple
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNTriples.regexSqt">
            <summary>
            Regex to detect presence of starting " in the value of a given N-Triple literal
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNTriples.regexEqt">
            <summary>
            Regex to detect presence of ending " in the value of a given N-Triple literal
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNTriples.Serialize(RDFSharp.Model.RDFGraph,System.String)">
            <summary>
            Serializes the given graph to the given filepath using N-Triples data format. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNTriples.Serialize(RDFSharp.Model.RDFGraph,System.IO.Stream)">
            <summary>
            Serializes the given graph to the given stream using N-Triples data format. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNTriples.Deserialize(System.String)">
            <summary>
            Deserializes the given N-Triples filepath to a graph. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNTriples.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the given N-Triples stream to a graph. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNTriples.TokenizeNTriple(System.String)">
            <summary>
            Tries to tokenize the given N-Triple
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFTriX">
            <summary>
            RDFTriX is responsible for managing serialization to and from TriX data format.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTriX.Serialize(RDFSharp.Model.RDFGraph,System.String)">
            <summary>
            Serializes the given graph to the given filepath using TriX data format. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTriX.Serialize(RDFSharp.Model.RDFGraph,System.IO.Stream)">
            <summary>
            Serializes the given graph to the given stream using TriX data format. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTriX.Deserialize(System.String)">
            <summary>
            Deserializes the given TriX filepath to a graph. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTriX.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the given TriX stream to a graph. 
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFTurtle">
            <summary>
            RDFTurtle is responsible for managing serialization to and from Turtle data format.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFTurtle.regexTTL">
            <summary>
            Regex to catch literals which must be escaped as long literals in Turtle
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.Serialize(RDFSharp.Model.RDFGraph,System.String)">
            <summary>
            Serializes the given graph to the given filepath using Turtle data format. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.Serialize(RDFSharp.Model.RDFGraph,System.IO.Stream)">
            <summary>
            Serializes the given graph to the given stream using Turtle data format. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.Deserialize(System.String)">
            <summary>
            Deserializes the given Turtle filepath to a graph. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the given Turtle stream to a graph.
            (This algorythm is based on Sesame Turtle parser)
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.PeekCodePoint(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Peeks at the next Unicode code point without advancing the reader
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ReadCodePoint(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Reads the next Unicode code point from the reader
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.UnreadCodePoint(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32)">
            <summary>
            Unreads the given Unicode code point from the reader
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.UnreadCodePoint(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Unreads the given Unicode code point from the reader
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.GetTurtleContextCoordinates(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets the actual coordinates within Turtle context
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.UpdateTurtleContextPosition(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32)">
            <summary>
            Updates the position of the cursor within Turtle context
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.SafetyCheckTurtleContextPosition(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Safety checks the position of the cursor within Turtle context
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseStatement(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},RDFSharp.Model.RDFGraph)">
            <summary>
            Parses the Turtle data in order to detect a valid directive or statement
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseDirective(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},RDFSharp.Model.RDFGraph,System.String)">
            <summary>
            Parses the Turtle data in order to detect a valid directive
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseTriples(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},RDFSharp.Model.RDFGraph)">
            <summary>
            Parses the Turtle data in order to detect a valid statement
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseSubject(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},RDFSharp.Model.RDFGraph)">
            <summary>
            Parses the Turtle data in order to detect a valid statement subject
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParsePredicate(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},RDFSharp.Model.RDFGraph)">
            <summary>
            Parses the Turtle data in order to detect a valid statement predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParsePredicateObjectList(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},RDFSharp.Model.RDFGraph)">
            <summary>
            Parses the Turtle data in order to detect a valid statement predicate-object list
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseObjectList(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},RDFSharp.Model.RDFGraph)">
            <summary>
            Parses the Turtle data in order to detect a valid statement object list
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseObject(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},RDFSharp.Model.RDFGraph)">
            <summary>
            Parses the Turtle data in order to detect a valid statement object
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseCollection(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},RDFSharp.Model.RDFGraph)">
            <summary>
            Parses a collection, e.g. ( item1 item2 item3 )
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseImplicitBlank(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},RDFSharp.Model.RDFGraph)">
            <summary>
            Parses an implicit blank node. This method parses the token []
            and predicateObjectLists that are surrounded by square brackets.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParsePrefixID(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},RDFSharp.Model.RDFGraph)">
            <summary>
            Parses the Turtle data in order to detect a valid namespace prefix
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseBase(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},RDFSharp.Model.RDFGraph)">
            <summary>
            Parses the Turtle data in order to detect a valid base directive
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseURI(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},RDFSharp.Model.RDFGraph)">
            <summary>
            Parses the Turtle data in order to detect a valid Uri
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseValue(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},RDFSharp.Model.RDFGraph)">
            <summary>
            Parses an RDF value. This method parses uriref, qname, node ID, quoted
            literal, integer, double and boolean.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseNodeID(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},RDFSharp.Model.RDFGraph)">
            <summary>
            Parses a blank node ID, e.g. _:node1
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseNumber(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},RDFSharp.Model.RDFGraph)">
            <summary>
            Parses a number
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseQNameOrBoolean(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},RDFSharp.Model.RDFGraph)">
            <summary>
            Parses qnames and boolean values, which have equivalent starting characters
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseQuotedLiteral(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},RDFSharp.Model.RDFGraph)">
            <summary>
            Parses a quoted string, optionally followed by a language tag or datatype.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseQuotedString(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Parses a quoted string, which is either a "normal string" or a """long string"""
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseString(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32)">
            <summary>
            Parses a "normal string". This method requires that the opening character has already been parsed.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseLongString(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32)">
            <summary>
            Parses a """long string""". This method requires that the first three characters have already been parsed.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.DecodeString(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Decodes an encoded Turtle string. Any \-escape sequences are substituted with their decoded value.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.SkipWhitespace(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},RDFSharp.Model.RDFGraph)">
            <summary>
            Consumes any whitespace characters (space, tab, line feed, newline) and comments(#-style) from the Turtle data.
            After this method has been called, the first character that is returned is either a non-ignorable character or EOF.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.SkipComment(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Consumes characters from reader until the first EOL has been read.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.VerifyCharacterOrFail(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32,System.String)">
            <summary>
            Verifies that the supplied character code point is one of the expected chars.
            This method will throw an exception if this is not the case.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsWhitespace(System.Int32)">
            <summary>
            Check if the supplied code point represents a whitespace character
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsNumber(System.Int32)">
            <summary>
            Check if the supplied code point represents a numeric character
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsSupplementaryCodePoint(System.Int32)">
            <summary>
            Determines whether the given scalar value is in the supplementary plane and thus
            requires 2 characters to be represented in UTF-16 (as a surrogate pair).
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsNameStartChar(System.Int32)">
            <summary>
            Check if the supplied code point represents a valid name start character
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsNameChar(System.Int32)">
            <summary>
            Check if the supplied code point represents a valid name character
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsPrefixStartChar(System.Int32)">
            <summary>
            Check if the supplied code point represents a valid prefixed name start character
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsPrefixChar(System.Int32)">
            <summary>
            Check if the supplied code point represents a valid prefix character
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsLanguageStartChar(System.Int32)">
            <summary>
            Check if the supplied code point represents a valid language tag start character
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsLanguageChar(System.Int32)">
            <summary>
            Check if the supplied code point represents a valid language tag character
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsLocalEscapedChar(System.Int32)">
            <summary>
            Check if the supplied code point represents a valid local escaped character.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsBLANK_NODE_LABEL_StartChar(System.Int32)">
            <summary>
            Check if the supplied code point represents a valid prefixed name start character
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsBLANK_NODE_LABEL_Char(System.Int32)">
            <summary>
            Check if the supplied code point represents a valid blank node label character
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsPN_CHARS(System.Int32)">
            <summary>
            Check if the supplied code point represents a valid prefixed name character
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsPN_CHARS_U(System.Int32)">
            <summary>
            Check if the supplied code point represents either a valid prefixed name base character or an underscore
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsPN_CHARS_BASE(System.Int32)">
            <summary>
            Check if the supplied code point represents a valid prefixed name base character
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFXml">
            <summary>
            RDFXml is responsible for managing serialization to and from XML data format.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.Serialize(RDFSharp.Model.RDFGraph,System.String)">
            <summary>
            Serializes the given graph to the given filepath using XML data format. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.Serialize(RDFSharp.Model.RDFGraph,System.IO.Stream)">
            <summary>
            Serializes the given graph to the given stream using XML data format. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.Deserialize(System.String)">
            <summary>
            Deserializes the given Xml filepath to a graph. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the given Xml stream to a graph. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.GetRdfRootNode(System.Xml.XmlDocument,System.Xml.XmlNamespaceManager)">
            <summary>
            Gives the "rdf:RDF" root node of the document
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.GetXmlnsNamespaces(System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Gives the collection of "xmlns" attributes of the "rdf:RDF" root node
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.GenerateNamespace(System.String,System.Boolean)">
            <summary>
            Generates an automatic prefix for a namespace
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.GetAutomaticNamespaces(RDFSharp.Model.RDFGraph)">
            <summary>
            Gets the list of automatic namespaces used within the predicates of the triples of the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.GetSubjectNode(System.Xml.XmlNode,System.Uri,RDFSharp.Model.RDFGraph)">
            <summary>
            Gives the subj node extracted from the attribute list of the current element 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.ResolveRelativeNode(System.Xml.XmlAttribute,System.Uri)">
            <summary>
            Checks if the given attribute is absolute Uri, relative Uri, "rdf:ID" relative Uri, "rdf:nodeID" blank node Uri
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.CheckIfRdfDescriptionNode(System.Xml.XmlNode)">
            <summary>
            Verify if we are on a standard rdf:Description element
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.GetRdfAboutAttribute(System.Xml.XmlNode)">
            <summary>
            Given an element, return the attribute which can correspond to the RDF subj
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.GetRdfResourceAttribute(System.Xml.XmlNode)">
            <summary>
            Given an element, return the attribute which can correspond to the RDF object
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.GetRdfDatatypeAttribute(System.Xml.XmlNode)">
            <summary>
            Given an element, return the attribute which can correspond to the RDF typed literal datatype
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.GetXmlLangAttribute(System.Xml.XmlNode)">
            <summary>
            Given an element, return the attribute which can correspond to the RDF plain literal language
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.GetParseTypeCollectionAttribute(System.Xml.XmlNode)">
            <summary>
            Given an element, return the attribute which can correspond to the RDF parseType "Collection"
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.GetParseTypeLiteralAttribute(System.Xml.XmlNode)">
            <summary>
            Given an element, return the attribute which can correspond to the RDF parseType "Literal"
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.ParseCollectionElements(System.Uri,System.Xml.XmlNode,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFGraph)">
            <summary>
            Given an attribute representing a RDF collection, iterates on its constituent elements
            to build its standard reification triples. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.CheckIfRdfContainerNode(System.Xml.XmlNode)">
            <summary>
            Verify if we are on a standard rdf:[Bag|Seq|Alt] element
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.GetContainerNode(System.Xml.XmlNode)">
            <summary>
            Given an element, return the child element which can correspond to the RDF container
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.ParseContainerElements(RDFSharp.Model.RDFModelEnums.RDFContainerTypes,System.Xml.XmlNode,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFGraph)">
            <summary>
            Given an element representing a RDF container, iterates on its constituent elements
            to build its standard reification triples. 
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFPatternGroupMember">
            <summary>
            RDFPatternGroupMember defines an object which can be member of a pattern group
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPatternGroupMember.PatternGroupMemberID">
            <summary>
            Unique representation of the pattern group member
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPatternGroupMember.IsEvaluable">
            <summary>
            Flag indicating that the pattern group member is evaluable by the engine
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroupMember.ToString">
            <summary>
            Gives the string representation of the pattern group member
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroupMember.Equals(RDFSharp.Query.RDFPatternGroupMember)">
            <summary>
            Performs the equality comparison between two pattern group members
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFPatternMember">
            <summary>
            RDFPatternMember defines an object which can be member of a pattern
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPatternMember.PatternMemberID">
            <summary>
            Unique representation of the pattern member
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternMember.ToString">
            <summary>
            Gives the string representation of the pattern member
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternMember.Equals(RDFSharp.Query.RDFPatternMember)">
            <summary>
            Performs the equality comparison between two pattern members
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryMember">
            <summary>
            RDFQueryMember defines an object which can be member of a query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFQueryMember.QueryMemberID">
            <summary>
            Unique representation of the query member
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFQueryMember.IsEvaluable">
            <summary>
            Flag indicating that the query member is evaluable by the engine
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryMember.ToString">
            <summary>
            Gives the string representation of the query member
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryMember.Equals(RDFSharp.Query.RDFQueryMember)">
            <summary>
            Performs the equality comparison between two query members
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryMember.GetQueryMemberString">
            <summary>
            Gets the string representation of the query member
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFAvgAggregator">
            <summary>
            RDFAvgAggregator represents an AVG aggregation function applied by a GroupBy modifier
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAvgAggregator.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build an AVG aggregator on the given variable and with the given projection name
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAvgAggregator.ToString">
            <summary>
            Gets the string representation of the AVG aggregator
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAvgAggregator.ExecutePartition(System.String,System.Data.DataRow)">
            <summary>
            Executes the partition on the given tablerow
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAvgAggregator.ExecuteProjection(System.Collections.Generic.List{RDFSharp.Query.RDFVariable})">
            <summary>
            Executes the projection producing result's table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAvgAggregator.UpdateProjectionTable(System.String,System.Data.DataTable)">
            <summary>
            Helps in finalization step by updating the projection's result table 
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFCountAggregator">
            <summary>
            RDFCountAggregator represents a COUNT aggregation function applied by a GroupBy modifier
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFCountAggregator.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a COUNT aggregator on the given variable and with the given projection name
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFCountAggregator.ToString">
            <summary>
            Gets the string representation of the COUNT aggregator
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFCountAggregator.ExecutePartition(System.String,System.Data.DataRow)">
            <summary>
            Executes the partition on the given tablerow
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFCountAggregator.ExecuteProjection(System.Collections.Generic.List{RDFSharp.Query.RDFVariable})">
            <summary>
            Executes the projection producing result's table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFCountAggregator.UpdateProjectionTable(System.String,System.Data.DataTable)">
            <summary>
            Helps in finalization step by updating the projection's result table 
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFGroupConcatAggregator">
            <summary>
            RDFGroupConcatAggregator represents a GROUP_CONCAT aggregation function applied by a GroupBy modifier
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFGroupConcatAggregator.Separator">
            <summary>
            Separator of the group values
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupConcatAggregator.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable,System.String)">
            <summary>
            Default-ctor to build a GROUP_CONCAT aggregator on the given variable, with the given projection name and given separator
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupConcatAggregator.ToString">
            <summary>
            Gets the string representation of the GROUP_CONCAT aggregator
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupConcatAggregator.ExecutePartition(System.String,System.Data.DataRow)">
            <summary>
            Executes the partition on the given tablerow
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupConcatAggregator.ExecuteProjection(System.Collections.Generic.List{RDFSharp.Query.RDFVariable})">
            <summary>
            Executes the projection producing result's table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupConcatAggregator.UpdateProjectionTable(System.String,System.Data.DataTable)">
            <summary>
            Helps in finalization step by updating the projection's result table 
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFMaxAggregator">
            <summary>
            RDFMinAggregator represents a MAX aggregation function applied by a GroupBy modifier
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFMaxAggregator.AggregatorFlavor">
            <summary>
            Flavor of the aggregator
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMaxAggregator.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFQueryEnums.RDFMinMaxAggregatorFlavors)">
            <summary>
            Default-ctor to build a MAX aggregator on the given variable, with the given projection name and given flavor
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMaxAggregator.ToString">
            <summary>
            Gets the string representation of the MAX aggregator
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMaxAggregator.ExecutePartition(System.String,System.Data.DataRow)">
            <summary>
            Executes the partition on the given tablerow
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMaxAggregator.ExecutePartitionNumeric(System.String,System.Data.DataRow)">
            <summary>
            Executes the partition on the given tablerow (NUMERIC)
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMaxAggregator.ExecutePartitionString(System.String,System.Data.DataRow)">
            <summary>
            Executes the partition on the given tablerow (STRING)
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMaxAggregator.ExecuteProjection(System.Collections.Generic.List{RDFSharp.Query.RDFVariable})">
            <summary>
            Executes the projection producing result's table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMaxAggregator.UpdateProjectionTable(System.String,System.Data.DataTable)">
            <summary>
            Helps in finalization step by updating the projection's result table 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMaxAggregator.UpdateProjectionTableNumeric(System.String,System.Data.DataTable)">
            <summary>
            Helps in finalization step by updating the projection's result table (NUMERIC)
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMaxAggregator.UpdateProjectionTableString(System.String,System.Data.DataTable)">
            <summary>
            Helps in finalization step by updating the projection's result table (STRING)
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFMinAggregator">
            <summary>
            RDFMinAggregator represents a MIN aggregation function applied by a GroupBy modifier
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFMinAggregator.AggregatorFlavor">
            <summary>
            Flavor of the aggregator
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMinAggregator.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFQueryEnums.RDFMinMaxAggregatorFlavors)">
            <summary>
            Default-ctor to build a MIN aggregator on the given variable, with the given projection name and given flavor
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMinAggregator.ToString">
            <summary>
            Gets the string representation of the MIN aggregator
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMinAggregator.ExecutePartition(System.String,System.Data.DataRow)">
            <summary>
            Executes the partition on the given tablerow
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMinAggregator.ExecutePartitionNumeric(System.String,System.Data.DataRow)">
            <summary>
            Executes the partition on the given tablerow (NUMERIC)
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMinAggregator.ExecutePartitionString(System.String,System.Data.DataRow)">
            <summary>
            Executes the partition on the given tablerow (STRING)
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMinAggregator.ExecuteProjection(System.Collections.Generic.List{RDFSharp.Query.RDFVariable})">
            <summary>
            Executes the projection producing result's table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMinAggregator.UpdateProjectionTable(System.String,System.Data.DataTable)">
            <summary>
            Helps in finalization step by updating the projection's result table 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMinAggregator.UpdateProjectionTableNumeric(System.String,System.Data.DataTable)">
            <summary>
            Helps in finalization step by updating the projection's result table (NUMERIC)
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMinAggregator.UpdateProjectionTableString(System.String,System.Data.DataTable)">
            <summary>
            Helps in finalization step by updating the projection's result table (STRING)
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFPartitionAggregator">
            <summary>
            RDFPartitionAggregator represents a PARTITION aggregation function applied by a GroupBy modifier
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPartitionAggregator.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a PARTITION aggregator on the given variable and with the given projection name
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPartitionAggregator.ToString">
            <summary>
            Gets the string representation of the PARTITION aggregator
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPartitionAggregator.ExecutePartition(System.String,System.Data.DataRow)">
            <summary>
            Executes the partition on the given tablerow
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPartitionAggregator.ExecuteProjection(System.Collections.Generic.List{RDFSharp.Query.RDFVariable})">
            <summary>
            Executes the projection producing result's table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPartitionAggregator.UpdateProjectionTable(System.String,System.Data.DataTable)">
            <summary>
            Helps in finalization step by updating the projection's result table 
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFSampleAggregator">
            <summary>
            RDFSampleAggregator represents a SAMPLE aggregation function applied by a GroupBy modifier
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSampleAggregator.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a SAMPLE aggregator on the given variable and with the given projection name
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSampleAggregator.ToString">
            <summary>
            Gets the string representation of the SAMPLE aggregator
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSampleAggregator.ExecutePartition(System.String,System.Data.DataRow)">
            <summary>
            Executes the partition on the given tablerow
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSampleAggregator.ExecuteProjection(System.Collections.Generic.List{RDFSharp.Query.RDFVariable})">
            <summary>
            Executes the projection producing result's table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSampleAggregator.UpdateProjectionTable(System.String,System.Data.DataTable)">
            <summary>
            Helps in finalization step by updating the projection's result table 
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFSumAggregator">
            <summary>
            RDFSumAggregator represents a SUM aggregation function applied by a GroupBy modifier
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSumAggregator.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a SUM aggregator on the given variable and with the given projection name
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSumAggregator.ToString">
            <summary>
            Gets the string representation of the SUM aggregator
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSumAggregator.ExecutePartition(System.String,System.Data.DataRow)">
            <summary>
            Executes the partition on the given tablerow
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSumAggregator.ExecuteProjection(System.Collections.Generic.List{RDFSharp.Query.RDFVariable})">
            <summary>
            Executes the projection producing result's table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSumAggregator.UpdateProjectionTable(System.String,System.Data.DataTable)">
            <summary>
            Helps in finalization step by updating the projection's result table 
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFBooleanAndFilter">
            <summary>
            RDFBooleanAndFilter represents a filter applying an "AND" on the logics of the given filters.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFBooleanAndFilter.LeftFilter">
            <summary>
            Left Filter
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFBooleanAndFilter.RightFilter">
            <summary>
            Right Filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBooleanAndFilter.#ctor(RDFSharp.Query.RDFFilter,RDFSharp.Query.RDFFilter)">
            <summary>
            Default-ctor to build an "AND" filter on the given filters
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBooleanAndFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBooleanAndFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFBooleanNotFilter">
            <summary>
            RDFBooleanNotFilter represents a filter applying a negation on the logics of the given filter.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFBooleanNotFilter.Filter">
            <summary>
            Filter to be negated
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBooleanNotFilter.#ctor(RDFSharp.Query.RDFFilter)">
            <summary>
            Default-ctor to build a negation filter on the given filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBooleanNotFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBooleanNotFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFBooleanOrFilter">
            <summary>
            RDFBooleanOrFilter represents a filter applying an "OR" on the logics of the given filters.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFBooleanOrFilter.LeftFilter">
            <summary>
            Left Filter
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFBooleanOrFilter.RightFilter">
            <summary>
            Right Filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBooleanOrFilter.#ctor(RDFSharp.Query.RDFFilter,RDFSharp.Query.RDFFilter)">
            <summary>
            Default-ctor to build an "OR" filter on the given filters
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBooleanOrFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBooleanOrFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFBoundFilter">
            <summary>
            RDFBoundFilter represents a filter checking if a variable is bound to a value.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFBoundFilter.Variable">
            <summary>
            Variable to be filtered
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBoundFilter.#ctor(RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a filter on the given variable
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBoundFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBoundFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the variable in the given datarow 
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFComparisonFilter">
            <summary>
            RDFComparisonFilter represents a filter applying a comparison between the given RDF terms.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFComparisonFilter.ComparisonFlavor">
            <summary>
            Comparison to be applied between the given pattern members
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFComparisonFilter.LeftMember">
            <summary>
            Left Pattern Member
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFComparisonFilter.RightMember">
            <summary>
            Right Pattern Member
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFComparisonFilter.#ctor(RDFSharp.Query.RDFQueryEnums.RDFComparisonFlavors,RDFSharp.Query.RDFPatternMember,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Default-ctor to build a comparison filter of the given type on the given filters
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFComparisonFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFComparisonFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFDatatypeFilter">
            <summary>
            RDFDatatypeFilter represents a filter on the datatype of a variable.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFDatatypeFilter.Variable">
            <summary>
            Variable to be filtered
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFDatatypeFilter.Datatype">
            <summary>
            Datatype to be filtered
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDatatypeFilter.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Model.RDFModelEnums.RDFDatatypes)">
            <summary>
            Default-ctor to build a filter on the given variable for the given datatype 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDatatypeFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDatatypeFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the variable in the given datarow 
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFExistsFilter">
            <summary>
            RDFExistsFilter represents a filter for checking existence of given RDF pattern.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFExistsFilter.Pattern">
            <summary>
            Pattern to be evaluated
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFExistsFilter.PatternResults">
            <summary>
            Results of the pattern evaluation on the RDF data source
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFExistsFilter.#ctor(RDFSharp.Query.RDFPattern)">
            <summary>
            Default-ctor to build a filter on the given pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFExistsFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFExistsFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the pattern in the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFInFilter">
            <summary>
            RDFInFilter represents a filter checking if a RDF term is found in a given set of RDF terms.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFInFilter.TermToSearch">
            <summary>
            RDF term to be searched
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFInFilter.InTerms">
            <summary>
            List of RDF terms in which the term should be searched
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFInFilter.#ctor(RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Default-ctor to build a filter on the given term and given search list
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFInFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFInFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the variable in the given datarow 
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFIsBlankFilter">
            <summary>
            RDFIsBlankFilter represents a filter for Blank Uri values of a variable.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFIsBlankFilter.Variable">
            <summary>
            Variable to be filtered
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsBlankFilter.#ctor(RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a filter on the given variable
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsBlankFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsBlankFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the variable in the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFIsLiteralFilter">
            <summary>
            RDFIsLiteralFilter represents a filter for literal values of a variable.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFIsLiteralFilter.Variable">
            <summary>
            Variable to be filtered
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsLiteralFilter.#ctor(RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a filter on the given variable
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsLiteralFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsLiteralFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the variable in the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFIsUriFilter">
            <summary>
            RDFIsUriFilter represents a filter for Uri values of a variable.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFIsUriFilter.Variable">
            <summary>
            Variable to be filtered
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsUriFilter.#ctor(RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a filter on the given variable
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsUriFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsUriFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the variable in the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFLangMatchesFilter">
            <summary>
            RDFLangMatchesFilter represents a filter on the language of a variable.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFLangMatchesFilter.Variable">
            <summary>
            Variable to be filtered
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFLangMatchesFilter.Language">
            <summary>
            Language to be filtered
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFLangMatchesFilter.#ctor(RDFSharp.Query.RDFVariable,System.String)">
            <summary>
            Default-ctor to build a filter on the given variable for the given language 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFLangMatchesFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFLangMatchesFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the variable in the given datarow 
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFNotExistsFilter">
            <summary>
            RDFNotExistsFilter represents a filter for checking absence of given RDF pattern.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFNotExistsFilter.#ctor(RDFSharp.Query.RDFPattern)">
            <summary>
            Default-ctor to build a filter on the given pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFNotExistsFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFNotExistsFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the pattern in the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFRegexFilter">
            <summary>
            RDFRegexFilter represents a filter applying a regular expression on the values of a variable.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFRegexFilter.Variable">
            <summary>
            Variable to be filtered
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFRegexFilter.RegEx">
            <summary>
            Regular Expression to be filtered
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFRegexFilter.#ctor(RDFSharp.Query.RDFVariable,System.Text.RegularExpressions.Regex)">
            <summary>
            Default-ctor to build a filter on the given variable for the given regular expression 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFRegexFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFRegexFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the variable in the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFSameTermFilter">
            <summary>
            RDFSameTermFilter represents an equality filter between a variable and a RDF term.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFSameTermFilter.Variable">
            <summary>
            Variable to be filtered
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFSameTermFilter.RDFTerm">
            <summary>
            RDF Term to be filtered (can be a RDFResource, a RDFLiteral or a RDFVariable)
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSameTermFilter.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Default-ctor to build an equality filter between the given variable and the given RDF term 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSameTermFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSameTermFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the variable in the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFValuesFilter">
            <summary>
            RDFValuesFilter represents an explicit binding of variables provided for filtering a SPARQL query.
            (This filter is NOT intended to be public: in fact, it is injected by RDFValues during evaluation).
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFValuesFilter.Values">
            <summary>
            SPARQL values wrapped by the filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFValuesFilter.#ctor(RDFSharp.Query.RDFValues)">
            <summary>
            Default-ctor to build a SPARQL values filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFValuesFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the columns corresponding to the variables in the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFDistinctModifier">
            <summary>
            RDFDistinctModifier is a modifier which drops duplicate rows for the level of detail of a SELECT query. 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDistinctModifier.#ctor">
            <summary>
            Default-ctor to build a Distinct modifier on a query 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDistinctModifier.ToString">
            <summary>
            Gives the string representation of the modifier 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDistinctModifier.ApplyModifier(System.Data.DataTable)">
            <summary>
            Applies the modifier on the given datatable 
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFGroupByModifier">
            <summary>
            RDFGroupByModifier represents an aggregator modifier to be applied on a query results table.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFGroupByModifier.PartitionVariables">
            <summary>
            List of variables on which query results are grouped
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFGroupByModifier.Aggregators">
            <summary>
            List of aggregators applied on the result groups
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupByModifier.#ctor(System.Collections.Generic.List{RDFSharp.Query.RDFVariable})">
            <summary>
            Default-ctor to build a GroupBy modifier on the given variables
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupByModifier.ToString">
            <summary>
            Gives the string representation of the modifier
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupByModifier.AddAggregator(RDFSharp.Query.RDFAggregator)">
            <summary>
            Adds the given aggregator to the modifier
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupByModifier.ApplyModifier(System.Data.DataTable)">
            <summary>
            Applies the modifier on the given datatable 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupByModifier.ConsistencyChecks(System.Data.DataTable)">
            <summary>
            Performs consistency checks
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupByModifier.ExecutePartitionAlgorythm(System.Data.DataTable)">
            <summary>
            Executes partition algorythm
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupByModifier.ExecuteProjectionAlgorythm">
            <summary>
            Executes projection algorythm
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupByModifier.ExecuteFilterAlgorythm(System.Data.DataTable)">
            <summary>
            Execute filter algorythm
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupByModifier.GetPartitionKey(System.Data.DataRow)">
            <summary>
            Calculates the partition key on the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFLimitModifier">
            <summary>
            RDFLimitModifier is a modifier which applies an upper-bound counter to the number of query results to be considered. 
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFLimitModifier.Limit">
            <summary>
            Maximum number of results taken from the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFLimitModifier.#ctor(System.Int32)">
            <summary>
            Default-ctor to build a Limit modifier on a query 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFLimitModifier.ToString">
            <summary>
            Gives the string representation of the modifier 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFLimitModifier.ApplyModifier(System.Data.DataTable)">
            <summary>
            Applies the modifier on the given datatable 
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFOffsetModifier">
            <summary>
            RDFOffsetModifier is a modifier which makes the first N query results to be not considered.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFOffsetModifier.Offset">
            <summary>
            Number of results not considered from the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOffsetModifier.#ctor(System.Int32)">
            <summary>
            Default-ctor to build an Offset modifier on a query 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOffsetModifier.ToString">
            <summary>
            Gives the string representation of the modifier 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOffsetModifier.ApplyModifier(System.Data.DataTable)">
            <summary>
            Applies the modifier on the given datatable 
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFOrderByModifier">
            <summary>
            RDFOrderByModifier is a modifier which applies a sort on the results of a SELECT query for the given variable. 
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFOrderByModifier.Variable">
            <summary>
            Variable to be ordered
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFOrderByModifier.OrderByFlavor">
            <summary>
            Flavor of variable ordering (ASC/DESC)
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOrderByModifier.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFQueryEnums.RDFOrderByFlavors)">
            <summary>
            Default-ctor to build an OrderBy modifier of the given flavor on the given variable 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOrderByModifier.ToString">
            <summary>
            Gives the string representation of the modifier 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOrderByModifier.ApplyModifier(System.Data.DataTable)">
            <summary>
            Applies the modifier on the column corresponding to the variable in the given datatable 
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFAskQuery">
            <summary>
            RDFAskQuery is the SPARQL "ASK" query implementation.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.#ctor">
            <summary>
            Default-ctor to build an empty ASK query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.ToString">
            <summary>
            Gives the string representation of the ASK query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.AddPatternGroup(RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Adds the given pattern group to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.AddPrefix(RDFSharp.Model.RDFNamespace)">
            <summary>
            Adds the given prefix declaration to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.AddSubQuery(RDFSharp.Query.RDFSelectQuery)">
            <summary>
            Adds the given subquery to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.ApplyToGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Applies the query to the given graph 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.ApplyToStore(RDFSharp.Store.RDFStore)">
            <summary>
            Applies the query to the given store 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.ApplyToFederation(RDFSharp.Store.RDFFederation)">
            <summary>
            Applies the query to the given federation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.ApplyToSPARQLEndpoint(RDFSharp.Query.RDFSPARQLEndpoint)">
            <summary>
            Applies the query to the given SPARQL endpoint
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFAskQueryResult">
            <summary>
            RDFAskResult is a container for SPARQL "ASK" query results.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFAskQueryResult.AskResult">
            <summary>
            Boolean response of the ASK query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQueryResult.#ctor">
            <summary>
            Default-ctor to build an empty ASK result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQueryResult.ToSparqlXmlResult(System.IO.Stream)">
            <summary>
            Writes the "SPARQL Query Results XML Format" stream corresponding to the ASK query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQueryResult.ToSparqlXmlResult(System.String)">
            <summary>
            Writes the "SPARQL Query Results XML Format" file corresponding to the ASK query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQueryResult.FromSparqlXmlResult(System.IO.Stream)">
            <summary>
            Reads the given "SPARQL Query Results XML Format" stream into an ASK query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQueryResult.FromSparqlXmlResult(System.String)">
            <summary>
            Reads the given "SPARQL Query Results XML Format" file into an ASK query result
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFConstructQuery">
            <summary>
            RDFConstructQuery is the SPARQL "CONSTRUCT" query implementation.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFConstructQuery.Templates">
            <summary>
            List of template patterns carried by the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFConstructQuery.Variables">
            <summary>
            List of variables carried by the template patterns of the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.#ctor">
            <summary>
            Default-ctor to build an empty CONSTRUCT query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.ToString">
            <summary>
            Gives the string representation of the CONSTRUCT query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.AddTemplate(RDFSharp.Query.RDFPattern)">
            <summary>
            Adds the given pattern to the templates of the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.AddPatternGroup(RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Adds the given pattern group to the body of the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.AddModifier(RDFSharp.Query.RDFLimitModifier)">
            <summary>
            Adds the given modifier to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.AddModifier(RDFSharp.Query.RDFOffsetModifier)">
            <summary>
            Adds the given modifier to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.AddPrefix(RDFSharp.Model.RDFNamespace)">
            <summary>
            Adds the given prefix declaration to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.AddSubQuery(RDFSharp.Query.RDFSelectQuery)">
            <summary>
            Adds the given subquery to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.ApplyToGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Applies the query to the given graph 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.ApplyToStore(RDFSharp.Store.RDFStore)">
            <summary>
            Applies the query to the given store 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.ApplyToFederation(RDFSharp.Store.RDFFederation)">
            <summary>
            Applies the query to the given federation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.ApplyToSPARQLEndpoint(RDFSharp.Query.RDFSPARQLEndpoint)">
            <summary>
            Applies the query to the given SPARQL endpoint
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFConstructQueryResult">
            <summary>
            RDFConstructQueryResult is a container for SPARQL "CONSTRUCT" query results.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFConstructQueryResult.ConstructResults">
            <summary>
            Tabular response of the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFConstructQueryResult.ConstructResultsCount">
            <summary>
            Gets the number of results produced by the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQueryResult.#ctor(System.String)">
            <summary>
            Default-ctor to build an empty CONSTRUCT result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQueryResult.ToRDFGraph">
            <summary>
            Builds a graph corresponding to the query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQueryResult.FromRDFGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Builds a query result corresponding to the given graph
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFDescribeQuery">
            <summary>
            RDFDescribeQuery is the SPARQL "DESCRIBE" query implementation.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFDescribeQuery.DescribeTerms">
            <summary>
            List of RDF terms to be described by the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFDescribeQuery.Variables">
            <summary>
            List of variables carried by the template patterns of the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.#ctor">
            <summary>
            Default-ctor to build an empty DESCRIBE query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.ToString">
            <summary>
            Gives the string representation of the DESCRIBE query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.AddDescribeTerm(RDFSharp.Model.RDFResource)">
            <summary>
            Adds the given resource to the describe terms of the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.AddDescribeTerm(RDFSharp.Query.RDFVariable)">
            <summary>
            Adds the given variable to the describe terms of the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.AddPatternGroup(RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Adds the given pattern group to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.AddModifier(RDFSharp.Query.RDFLimitModifier)">
            <summary>
            Adds the given modifier to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.AddModifier(RDFSharp.Query.RDFOffsetModifier)">
            <summary>
            Adds the given modifier to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.AddPrefix(RDFSharp.Model.RDFNamespace)">
            <summary>
            Adds the given prefix declaration to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.AddSubQuery(RDFSharp.Query.RDFSelectQuery)">
            <summary>
            Adds the given subquery to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.ApplyToGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Applies the query to the given graph 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.ApplyToStore(RDFSharp.Store.RDFStore)">
            <summary>
            Applies the query to the given store 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.ApplyToFederation(RDFSharp.Store.RDFFederation)">
            <summary>
            Applies the query to the given federation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.ApplyToSPARQLEndpoint(RDFSharp.Query.RDFSPARQLEndpoint)">
            <summary>
            Applies the query to the given SPARQL endpoint
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFDescribeQueryResult">
            <summary>
            RDFDescribeQueryResult is a container for SPARQL "DESCRIBE" query results.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFDescribeQueryResult.DescribeResults">
            <summary>
            Tabular response of the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFDescribeQueryResult.DescribeResultsCount">
            <summary>
            Gets the number of results produced by the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQueryResult.#ctor(System.String)">
            <summary>
            Default-ctor to build an empty DESCRIBE result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQueryResult.ToRDFGraph">
            <summary>
            Builds a graph corresponding to the query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQueryResult.ToRDFMemoryStore">
            <summary>
            Builds a memory store corresponding to the query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQueryResult.FromRDFGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Builds a query result corresponding to the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQueryResult.FromRDFMemoryStore(RDFSharp.Store.RDFMemoryStore)">
            <summary>
            Builds a query result corresponding to the given memory store
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFSelectQuery">
            <summary>
            RDFSelectQuery is the SPARQL "SELECT" query implementation.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFSelectQuery.ProjectionVars">
            <summary>
            Dictionary of projection variables and associated ordinals
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.#ctor">
            <summary>
            Default-ctor to build an empty SELECT query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.ToString">
            <summary>
            Gives the string representation of the SELECT query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.AddPatternGroup(RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Adds the given pattern group to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.AddProjectionVariable(RDFSharp.Query.RDFVariable)">
            <summary>
            Adds the given variable to the results of the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.AddModifier(RDFSharp.Query.RDFModifier)">
            <summary>
            Adds the given modifier to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.AddPrefix(RDFSharp.Model.RDFNamespace)">
            <summary>
            Adds the given prefix declaration to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.AddSubQuery(RDFSharp.Query.RDFSelectQuery)">
            <summary>
            Adds the given subquery to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.ApplyToGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Applies the query to the given graph 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.ApplyToStore(RDFSharp.Store.RDFStore)">
            <summary>
            Applies the query to the given store 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.ApplyToFederation(RDFSharp.Store.RDFFederation)">
            <summary>
            Applies the query to the given federation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.ApplyToSPARQLEndpoint(RDFSharp.Query.RDFSPARQLEndpoint)">
            <summary>
            Applies the query to the given SPARQL endpoint
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.Optional">
            <summary>
            Sets the query as optional
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.UnionWithNext">
            <summary>
            Sets the query to be joined as union with the next query member
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFSelectQueryResult">
            <summary>
            RDFSelectQueryResult is a container for SPARQL "SELECT" query results.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFSelectQueryResult.SelectResults">
            <summary>
            Tabular response of the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFSelectQueryResult.SelectResultsCount">
            <summary>
            Gets the number of results produced by the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQueryResult.#ctor">
            <summary>
            Default-ctor to build an empty SELECT result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQueryResult.ToSparqlXmlResult(System.IO.Stream)">
            <summary>
            Writes the "SPARQL Query Results XML Format" stream corresponding to the SELECT query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQueryResult.ToSparqlXmlResult(System.String)">
            <summary>
            Writes the "SPARQL Query Results XML Format" file corresponding to the SELECT query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQueryResult.FromSparqlXmlResult(System.String)">
            <summary>
            Reads the given "SPARQL Query Results XML Format" file into a SELECT query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQueryResult.FromSparqlXmlResult(System.IO.Stream)">
            <summary>
            Reads the given "SPARQL Query Results XML Format" stream into a SELECT query result
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFAggregator">
            <summary>
            RDFAggregator represents an aggregation function applied by a GroupBy modifier
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFAggregator.AggregatorVariable">
            <summary>
            Variable on which the aggregator is applied
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFAggregator.ProjectionVariable">
            <summary>
            Variable used for projection of aggregator results
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFAggregator.IsDistinct">
            <summary>
            Flag indicating that the aggregator discards duplicates
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFAggregator.HavingClause">
            <summary>
            Tuple indicating that the aggregator is also an having-clause
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFAggregator.AggregatorContext">
            <summary>
            Context for keeping track of aggregator's execution
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregator.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build an aggregator on the given variable and with the given projection name
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregator.ToString">
            <summary>
            Gives the string representation of the aggregator function 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregator.ExecutePartition(System.String,System.Data.DataRow)">
            <summary>
            Executes the partition on the given tablerow
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregator.ExecuteProjection(System.Collections.Generic.List{RDFSharp.Query.RDFVariable})">
            <summary>
            Executes the projection producing result's table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregator.UpdateProjectionTable(System.String,System.Data.DataTable)">
            <summary>
            Helps in finalization step by updating the projection's result table 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregator.GetRowValueAsNumber(System.Data.DataRow)">
            <summary>
            Gets the row value for the aggregator as number
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregator.GetRowValueAsString(System.Data.DataRow)">
            <summary>
            Gets the row value for the aggregator as string
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregator.PrintHavingClause(System.Collections.Generic.List{RDFSharp.Model.RDFNamespace})">
            <summary>
            Prints the having-clause of the aggregator
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregator.Distinct">
            <summary>
            Sets the aggregator in order to discard duplicates
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregator.SetHavingClause(RDFSharp.Query.RDFQueryEnums.RDFComparisonFlavors,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Sets the aggregator in order to also represent an having-clause
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFAggregatorContext">
            <summary>
            RDFAggregatorContext represents a registry for keeping track of aggregator's execution
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFAggregatorContext.ExecutionRegistry">
            <summary>
            Registry to keep track of aggregator execution flow
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFAggregatorContext.ExecutionCache">
            <summary>
            Cache to keep track of aggregator execution values
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregatorContext.#ctor">
            <summary>
            Default-ctor to build an empty aggregator context
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregatorContext.AddPartitionKey``1(System.String,``0)">
            <summary>
            Adds the given partitionKey to the aggregator context
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregatorContext.GetPartitionKeyExecutionResult``1(System.String,``0)">
            <summary>
            Gets the execution result for the given partition key
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregatorContext.GetPartitionKeyExecutionCounter(System.String)">
            <summary>
            Gets the execution counter for the given partition key
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregatorContext.UpdatePartitionKeyExecutionResult``1(System.String,``0)">
            <summary>
            Updates the execution result for the given partition key
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregatorContext.UpdatePartitionKeyExecutionCounter(System.String)">
            <summary>
            Updates the execution counter for the given partition key
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregatorContext.CheckPartitionKeyRowValueCache``1(System.String,``0)">
            <summary>
            Checks for presence of the given value in given partitionkey's cache
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregatorContext.UpdatePartitionKeyRowValueCache``1(System.String,``0)">
            <summary>
            Updates the given partitionKey's cache with the given value
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFFilter">
            <summary>
            RDFFilter represents a filter to be applied on a query results table.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFFilter.ToString">
            <summary>
            Gives the string representation of the filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the given datarow 
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFModifier">
            <summary>
            RDFModifier represents a modifier to be applied on a query results table.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFModifier.ToString">
            <summary>
            Gives the string representation of the modifier
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFModifier.ApplyModifier(System.Data.DataTable)">
            <summary>
            Applies the modifier on the given datatable 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFModifier.GetQueryMemberString">
            <summary>
            Gets the string representation of the query member
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFPattern">
            <summary>
            RDFPattern represents a search pattern over a collection of RDF data.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPattern.Context">
            <summary>
            Member acting as context token of the pattern
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPattern.Subject">
            <summary>
            Member acting as subject token of the pattern
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPattern.Predicate">
            <summary>
            Member acting as predicate token of the pattern
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPattern.Object">
            <summary>
            Member acting as object token of the pattern
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPattern.IsOptional">
            <summary>
            Flag indicating the pattern as optional
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPattern.JoinAsUnion">
            <summary>
            Flag indicating the pattern to be joined as union
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPattern.Variables">
            <summary>
            List of variables carried by the pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPattern.#ctor(RDFSharp.Query.RDFPatternMember,RDFSharp.Query.RDFPatternMember,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Default ctor for SPO pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPattern.#ctor(RDFSharp.Query.RDFPatternMember,RDFSharp.Query.RDFPatternMember,RDFSharp.Query.RDFPatternMember,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Default ctor for CSPO pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPattern.ToString">
            <summary>
            Gives the string representation of the pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPattern.Optional">
            <summary>
            Sets the pattern as optional
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPattern.UnionWithNext">
            <summary>
            Sets the pattern to be joined as union with the next pattern
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFPatternGroup">
            <summary>
            RDFPatternGroup represents a named group of patterns having its own filters.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPatternGroup.PatternGroupName">
            <summary>
            Name of the pattern group, which must be unique in a query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPatternGroup.IsOptional">
            <summary>
            Flag indicating the pattern group to be joined as Optional
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPatternGroup.JoinAsUnion">
            <summary>
            Flag indicating the pattern group to be joined as Union
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPatternGroup.GroupMembers">
            <summary>
            List of members carried by the pattern group
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPatternGroup.Variables">
            <summary>
            List of variables carried by the patterns of the pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.#ctor(System.String)">
            <summary>
            Default-ctor to build an empty named pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.#ctor(System.String,System.Collections.Generic.List{RDFSharp.Query.RDFPattern})">
            <summary>
            List-ctor to build a named pattern group with the given list of patterns 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.#ctor(System.String,System.Collections.Generic.List{RDFSharp.Query.RDFPattern},System.Collections.Generic.List{RDFSharp.Query.RDFFilter})">
            <summary>
            List-ctor to build a named pattern group with the given list of patterns and filters
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.ToString">
            <summary>
            Gives the string representation of the patternGroup
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.AddPattern(RDFSharp.Query.RDFPattern)">
            <summary>
            Adds the given pattern to the pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.AddPropertyPath(RDFSharp.Query.RDFPropertyPath)">
            <summary>
            Adds the given property path to the pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.AddValues(RDFSharp.Query.RDFValues)">
            <summary>
            Adds the given SPARQL values to the pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.AddFilter(RDFSharp.Query.RDFFilter)">
            <summary>
            Adds the given filter to the pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.Optional">
            <summary>
            Sets the pattern group as optional
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.UnionWithNext">
            <summary>
            Sets the pattern group to be joined as union with the next query member
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.GetPatterns">
            <summary>
            Gets the group members of type: pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.GetPropertyPaths">
            <summary>
            Gets the group members of type: property path
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.GetValues">
            <summary>
            Gets the group members of type: values
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.AddInjectedValues(RDFSharp.Query.RDFValues)">
            <summary>
            Adds the given injected SPARQL values to the pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.GetFilters">
            <summary>
            Gets the group members of type: filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.GetEvaluablePatternGroupMembers">
            <summary>
            Gets the group members which can be evaluated
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.GetQueryMemberString">
            <summary>
            Gets the string representation of the query member
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFPropertyPath">
            <summary>
            RDFPropertyPath represents a chain of properties connecting two terms in a RDF datasource.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPropertyPath.Start">
            <summary>
            Start of the path
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPropertyPath.Steps">
            <summary>
            Steps of the path
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPropertyPath.Depth">
            <summary>
            Depth of the path
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPropertyPath.End">
            <summary>
            End of the path
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPropertyPath.#ctor(RDFSharp.Query.RDFPatternMember,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Default-ctor to build a path between the given terms
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPropertyPath.ToString">
            <summary>
            Gives the string representation of the path
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPropertyPath.AddAlternativeSteps(System.Collections.Generic.List{RDFSharp.Query.RDFPropertyPathStep})">
            <summary>
            Adds the given alternative steps to the path. If only one is given, it is considered sequence.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPropertyPath.AddSequenceStep(RDFSharp.Query.RDFPropertyPathStep)">
            <summary>
            Adds the given sequence step to the path
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPropertyPath.GetPatternList">
            <summary>
            Gets the list of patterns corresponding to the path
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFPropertyPathStep">
            <summary>
            RDFPropertyPathStep represents a step of a property path
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPropertyPathStep.StepProperty">
            <summary>
            Property of the step
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPropertyPathStep.StepFlavor">
            <summary>
            Flavor of the step
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPropertyPathStep.IsInverseStep">
            <summary>
            Flag indicating that the step has inverse evaluation
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPropertyPathStep.StepOrdinal">
            <summary>
            Ordinal of the step
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPropertyPathStep.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a step of a property path
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPropertyPathStep.SetFlavor(RDFSharp.Query.RDFQueryEnums.RDFPropertyPathStepFlavors)">
            <summary>
            Sets the flavor of the step
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPropertyPathStep.SetOrdinal(System.Int32)">
            <summary>
            Sets the ordinal of the step
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPropertyPathStep.Inverse">
            <summary>
            Sets the step as inverse
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQuery">
            <summary>
            RDFQuery is the foundation class for modeling SPARQL queries
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFQuery.QueryMembers">
            <summary>
            List of members carried by the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFQuery.Prefixes">
            <summary>
            List of prefixes registered for the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFQuery.IsOptional">
            <summary>
            Flag indicating the subquery to be joined as Optional
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFQuery.JoinAsUnion">
            <summary>
            Flag indicating the subquery to be joined as Union
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFQuery.IsSubQuery">
            <summary>
            Flag indicating that the query is a subquery
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQuery.#ctor">
            <summary>
            Default-ctor to build an empty query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQuery.GetPatternGroups">
            <summary>
            Gets the query members of type: pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQuery.GetModifiers">
            <summary>
            Gets the query members of type: modifier
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQuery.GetSubQueries">
            <summary>
            Gets the query members of type: query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQuery.GetValues">
            <summary>
            Gets the SPARQL values of the query, including those from patterngroups and subqueries
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQuery.InjectValues(System.Collections.Generic.List{RDFSharp.Query.RDFValues})">
            <summary>
            Injects the given list of SPARQL values to patterngroups and subqueries of the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQuery.GetPrefixes">
            <summary>
            Gets the prefixes of the query, including those from subqueries
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQuery.GetEvaluableQueryMembers">
            <summary>
            Gets the query members which can be evaluated
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQuery.GetQueryMemberString">
            <summary>
            Gets the strin representation of the query member
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQuery.SubQuery">
            <summary>
            Sets the query as a subquery
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFSPARQLEndpoint">
            <summary>
            RDFSPARQLEndpoint represents a SPARQL endpoint
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFSPARQLEndpoint.BaseAddress">
            <summary>
            Base address of the SPARQL endpoint
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFSPARQLEndpoint.QueryParams">
            <summary>
            Collection of query params sent to the SPARQL endpoint
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSPARQLEndpoint.#ctor(System.Uri)">
            <summary>
            Default-ctor to build a SPARQL enpoint with given base address
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSPARQLEndpoint.ToString">
            <summary>
            Gives the string representation of the variable
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSPARQLEndpoint.AddDefaultGraphUri(System.String)">
            <summary>
            Adds a "default-graph-uri" parameter to be sent to the SPARQL endpoint
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSPARQLEndpoint.AddNamedGraphUri(System.String)">
            <summary>
            Adds a "named-graph-uri" parameter to be sent to the SPARQL endpoint
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFValues">
            <summary>
            RDFValues represents a binding of variables provided directly inside a SPARQL query.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFValues.Bindings">
            <summary>
            Dictionary of bindings representing the SPARQL values
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFValues.MaxBindingsLength">
            <summary>
            Represents the current max length of the bindings
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFValues.IsInjected">
            <summary>
            Flag indicating that the SPARQL values has been injected by Mirella
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFValues.#ctor">
            <summary>
            Default-ctor to build an empty SPARQL values
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFValues.ToString">
            <summary>
            Gives the string representation of the SPARQL values
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFValues.AddColumn(RDFSharp.Query.RDFVariable,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Adds the given column of bindings to the SPARQL values
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFValues.GetDataTable">
            <summary>
            Gets the datatable representing the SPARQL values
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFValues.GetValuesFilter">
            <summary>
            Gets the filter representation of the SPARQL values
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFVariable">
            <summary>
            RDFVariable represents a named "hole" in a pattern, to be filled with values during queries.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFVariable.VariableName">
            <summary>
            Name of the variable
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFVariable.#ctor(System.String)">
            <summary>
            Default-ctor to build a named SPARQL variable
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFVariable.ToString">
            <summary>
            Gives the string representation of the variable
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEngine">
            <summary>
            RDFQueryEngine is the engine for execution of SPARQL queries (MIRELLA)
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFQueryEngine.QueryMemberTemporaryResultTables">
            <summary>
            Dictionary of temporary result tables produced by evaluation of query members
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFQueryEngine.QueryMemberFinalResultTables">
            <summary>
            Dictionary of final result tables produced by evaluation of query members
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.#ctor">
            <summary>
            Default-ctor to initialize a query engine instance
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.EvaluateSelectQuery(RDFSharp.Query.RDFSelectQuery,RDFSharp.Model.RDFDataSource)">
            <summary>
            Evaluates the given SPARQL SELECT query on the given RDF datasource
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.EvaluateDescribeQuery(RDFSharp.Query.RDFDescribeQuery,RDFSharp.Model.RDFDataSource)">
            <summary>
            Evaluates the given SPARQL DESCRIBE query on the given RDF datasource
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.EvaluateConstructQuery(RDFSharp.Query.RDFConstructQuery,RDFSharp.Model.RDFDataSource)">
            <summary>
            Evaluates the given SPARQL CONSTRUCT query on the given RDF datasource
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.EvaluateAskQuery(RDFSharp.Query.RDFAskQuery,RDFSharp.Model.RDFDataSource)">
            <summary>
            Evaluates the given SPARQL ASK query on the given RDF datasource
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.EvaluatePatternGroup(RDFSharp.Query.RDFQuery,RDFSharp.Query.RDFPatternGroup,RDFSharp.Model.RDFDataSource,System.Boolean)">
            <summary>
            Get the intermediate result tables of the given pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.FinalizePatternGroup(RDFSharp.Query.RDFQuery,RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Get the final result table of the given pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.ApplyFilters(RDFSharp.Query.RDFQuery,RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Apply the filters of the given pattern group to its result table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.ApplyModifiers(RDFSharp.Query.RDFQuery,System.Data.DataTable)">
            <summary>
            Apply the query modifiers to the query result table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.FillTemplates(RDFSharp.Query.RDFConstructQuery,System.Data.DataTable)">
            <summary>
            Fills the templates of the given CONSTRUCT query with data from the given result table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.DescribeTerms(RDFSharp.Query.RDFDescribeQuery,RDFSharp.Model.RDFDataSource,System.Data.DataTable)">
            <summary>
            Describes the terms of the given DESCRIBE query with data from the given result table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.ApplyPattern(RDFSharp.Query.RDFPattern,RDFSharp.Model.RDFGraph)">
            <summary>
            Applies the given pattern to the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.ApplyPattern(RDFSharp.Query.RDFPattern,RDFSharp.Store.RDFStore)">
            <summary>
            Applies the given pattern to the given store
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.ApplyPropertyPath(RDFSharp.Query.RDFPropertyPath,RDFSharp.Model.RDFDataSource)">
            <summary>
            Applies the given property path to the given graph
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEngine.DataColumnComparer">
            <summary>
            Utility class for comparison between data columns
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEngine.dtComparer">
            <summary>
            Static instance of the comparer used by the engine to compare data columns
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.AddColumn(System.Data.DataTable,System.String)">
            <summary>
            Adds a new column to the given table, avoiding duplicates 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.AddRow(System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds a new row to the given table 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.PopulateTable(RDFSharp.Query.RDFPattern,System.Collections.Generic.List{RDFSharp.Model.RDFTriple},RDFSharp.Query.RDFQueryEnums.RDFPatternHoles,System.Data.DataTable)">
            <summary>
            Builds the table results of the pattern with values from the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.PopulateTable(RDFSharp.Query.RDFPattern,RDFSharp.Store.RDFMemoryStore,RDFSharp.Query.RDFQueryEnums.RDFPatternHoles,System.Data.DataTable)">
            <summary>
            Builds the table results of the pattern with values from the given store
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.InnerJoinTables(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            Joins two datatables WITHOUT support for OPTIONAL data
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.OuterJoinTables(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            Joins two datatables WITH support for OPTIONAL data
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.CombineTables(System.Collections.Generic.List{System.Data.DataTable},System.Boolean)">
            <summary>
            Merges / Joins / Products the given list of data tables, based on presence of common columns and dynamic detection of Optional / Union operators
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.ProjectTable(RDFSharp.Query.RDFSelectQuery,System.Data.DataTable)">
            <summary>
            Applies the projection operator on the given table, based on the given query's projection variables
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryPrinter">
            <summary>
            RDFQueryPrinter is responsible for getting string representation of SPARQL query entities
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryPrinter.PrintSelectQuery(RDFSharp.Query.RDFSelectQuery,System.Double,System.Boolean)">
            <summary>
            Prints the string representation of a SPARQL SELECT query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryPrinter.PrintDescribeQuery(RDFSharp.Query.RDFDescribeQuery)">
            <summary>
            Prints the string representation of a SPARQL DESCRIBE query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryPrinter.PrintConstructQuery(RDFSharp.Query.RDFConstructQuery)">
            <summary>
            Prints the string representation of a SPARQL CONSTRUCT query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryPrinter.PrintAskQuery(RDFSharp.Query.RDFAskQuery)">
            <summary>
            Prints the string representation of a SPARQL ASK query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryPrinter.PrintPatternGroup(RDFSharp.Query.RDFPatternGroup,System.Int32,System.Boolean,System.Collections.Generic.List{RDFSharp.Model.RDFNamespace})">
            <summary>
            Prints the string representation of a pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryPrinter.PrintPattern(RDFSharp.Query.RDFPattern,System.Collections.Generic.List{RDFSharp.Model.RDFNamespace})">
            <summary>
            Prints the string representation of a pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryPrinter.PrintPropertyPath(RDFSharp.Query.RDFPropertyPath,System.Collections.Generic.List{RDFSharp.Model.RDFNamespace})">
            <summary>
            Prints the string representation of a property path
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryPrinter.PrintValues(RDFSharp.Query.RDFValues,System.Collections.Generic.List{RDFSharp.Model.RDFNamespace},System.String)">
            <summary>
            Prints the string representation of a SPARQL values
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryPrinter.PrintPatternMember(RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Model.RDFNamespace})">
            <summary>
            Prints the string representation of a pattern member
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEnums">
            <summary>
            RDFQueryEnums represents a collector for all the enumerations used by the "RDFSharp.Query" namespace
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEnums.RDFPatternHoles">
            <summary>
            RDFPatternHoles represents an enumeration for possible positions of holes in a pattern.
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEnums.RDFOrderByFlavors">
            <summary>
            RDFOrderByFlavors represents an enumeration for possible directions of query results ordering on a given variable.
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFOrderByFlavors.ASC">
            <summary>
            Orders SPARQL results in ascending mode on the selected variable
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFOrderByFlavors.DESC">
            <summary>
            Orders SPARQL results in descending mode on the selected variable
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEnums.RDFComparisonFlavors">
            <summary>
            RDFComparisonFlavors represents an enumeration for possible comparison modes between two patten members.
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFComparisonFlavors.LessOrEqualThan">
            <summary>
            Represents the less-or-equal comparison operator
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFComparisonFlavors.LessThan">
            <summary>
            Represents the less comparison operator
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFComparisonFlavors.EqualTo">
            <summary>
            Represents the equal comparison operator
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFComparisonFlavors.NotEqualTo">
            <summary>
            Represents the not-equal comparison operator
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFComparisonFlavors.GreaterThan">
            <summary>
            Represents the greater comparison operator
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFComparisonFlavors.GreaterOrEqualThan">
            <summary>
            Represents the greater-or-equal comparison operator
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEnums.RDFPropertyPathStepFlavors">
            <summary>
            RDFPropertyPathStepFlavors represents an enumeration for possible connection types within a property path.
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFPropertyPathStepFlavors.Sequence">
            <summary>
            Steps within a property path are connected with AND semantic
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFPropertyPathStepFlavors.Alternative">
            <summary>
            Steps within a property path are connected with OR semantic
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEnums.RDFMinMaxAggregatorFlavors">
            <summary>
            RDFMinMaxAggregatorFlavors represents an enumeration for supported flavors of MIN/MAX aggregators
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFMinMaxAggregatorFlavors.Numeric">
            <summary>
            MIN/MAX aggregator suitable for working on columns with numeric typedliteral values
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFMinMaxAggregatorFlavors.String">
            <summary>
            MIN/MAX aggregator suitable for working on columns with generic values
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEvents">
            <summary>
            RDFQueryEvents represents a collector for all the events generated within the "RDFSharp.Query" namespace
            </summary>
        </member>
        <member name="E:RDFSharp.Query.RDFQueryEvents.OnASKQueryEvaluation">
            <summary>
            Event representing an information message generated during SPARQL ASK query evaluation
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEvents.RDFASKQueryEvaluationEventHandler">
            <summary>
            Delegate to handle information events generated during SPARQL ASK query evaluation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEvents.RaiseASKQueryEvaluation(System.String)">
            <summary>
            Internal invoker of the subscribed information event handler
            </summary>
        </member>
        <member name="E:RDFSharp.Query.RDFQueryEvents.OnCONSTRUCTQueryEvaluation">
            <summary>
            Event representing an information message generated during SPARQL CONSTRUCT query evaluation
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEvents.RDFCONSTRUCTQueryEvaluationEventHandler">
            <summary>
            Delegate to handle information events generated during SPARQL CONSTRUCT query evaluation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEvents.RaiseCONSTRUCTQueryEvaluation(System.String)">
            <summary>
            Internal invoker of the subscribed information event handler
            </summary>
        </member>
        <member name="E:RDFSharp.Query.RDFQueryEvents.OnDESCRIBEQueryEvaluation">
            <summary>
            Event representing an information message generated during SPARQL DESCRIBE query evaluation
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEvents.RDFDESCRIBEQueryEvaluationEventHandler">
            <summary>
            Delegate to handle information events generated during SPARQL DESCRIBE query evaluation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEvents.RaiseDESCRIBEQueryEvaluation(System.String)">
            <summary>
            Internal invoker of the subscribed information event handler
            </summary>
        </member>
        <member name="E:RDFSharp.Query.RDFQueryEvents.OnSELECTQueryEvaluation">
            <summary>
            Event representing an information message generated during SPARQL SELECT query evaluation
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEvents.RDFSELECTQueryEvaluationEventHandler">
            <summary>
            Delegate to handle information events generated during SPARQL SELECT query evaluation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEvents.RaiseSELECTQueryEvaluation(System.String)">
            <summary>
            Internal invoker of the subscribed information event handler
            </summary>
        </member>
        <member name="E:RDFSharp.Query.RDFQueryEvents.OnGENERICQueryEvaluation">
            <summary>
            Event representing an information message generated during SPARQL query evaluation
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEvents.RDFGENERICQueryEvaluationEventHandler">
            <summary>
            Delegate to handle information events generated during SPARQL query evaluation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEvents.RaiseGENERICQueryEvaluation(System.String)">
            <summary>
            Internal invoker of the subscribed information event handler
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryException">
            <summary>
            RDFQueryException represents an exception thrown during creation and execution of SPARQL queries.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryException.#ctor">
            <summary>
            Basic ctor to throw an empty RDFQueryException
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryException.#ctor(System.String)">
            <summary>
            Basic ctor to throw an RDFQueryException with message
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryException.#ctor(System.String,System.Exception)">
            <summary>
            Basic ctor to throw an RDFQueryException with message and inner exception
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Basic ctor to support serialization of a remotely thrown RDFQueryException
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryUtilities">
            <summary>
            RDFQueryUtilities is a collector of reusable utility methods for RDF query management
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryUtilities.ParseRDFPatternMember(System.String)">
            <summary>
            Parses the given string to return an instance of pattern member
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryUtilities.CompareRDFPatternMembers(RDFSharp.Query.RDFPatternMember,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Compares the given pattern members, throwing a "Type Error" whenever the comparison operator detects sematically incompatible members;
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryUtilities.AbbreviateRDFPatternMember(RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Model.RDFNamespace})">
            <summary>
            Tries to abbreviate the string representation of the given pattern member by searching for it in the given list of namespaces
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFMemoryStore">
            <summary>
            RDFMemoryStore represents an in-memory RDF store engine.
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFMemoryStore.QuadruplesCount">
            <summary>
            Count of the store's quadruples
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFMemoryStore.QuadruplesEnumerator">
            <summary>
            Gets the enumerator on the store's quadruples for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFMemoryStore.StoreGUID">
            <summary>
            Identifier of the memory store
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFMemoryStore.StoreIndex">
            <summary>
            Index on the quadruples of the store
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFMemoryStore.Quadruples">
            <summary>
            List of quadruples embedded into the store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.#ctor">
            <summary>
            Default-ctor to build an empty memory store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.#ctor(System.Collections.Generic.List{RDFSharp.Store.RDFQuadruple})">
            <summary>
            List-based ctor to build a memory store with the given list of quadruples
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.ToString">
            <summary>
            Gives the string representation of the Memory store 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.Equals(RDFSharp.Store.RDFMemoryStore)">
            <summary>
            Performs the equality comparison between two memory stores
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.System#Collections#Generic#IEnumerable{RDFSharp#Store#RDFQuadruple}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the store's quadruples
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the store's quadruples
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.MergeGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Merges the given graph into the store, avoiding duplicate insertions
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.AddQuadruple(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Adds the given quadruple to the store, avoiding duplicate insertions
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruple(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Removes the given quadruple from the store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByContext(RDFSharp.Store.RDFContext)">
            <summary>
            Removes the quadruples with the given context
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesBySubject(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given subject
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByPredicate(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByObject(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given resource as object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByLiteral(RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given literal as object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByContextSubject(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context and subject
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByContextPredicate(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context and predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByContextObject(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context and object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByContextLiteral(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given context and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByContextSubjectPredicate(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context, subject and predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByContextSubjectObject(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context, subject and object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByContextSubjectLiteral(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given context, subject and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByContextPredicateObject(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context, predicate and object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByContextPredicateLiteral(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given context, predicate and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesBySubjectPredicate(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given subject and predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesBySubjectObject(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given subject and object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesBySubjectLiteral(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given subject and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByPredicateObject(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given predicate and object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByPredicateLiteral(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given predicate and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.ClearQuadruples">
            <summary>
            Clears the quadruples of the store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.ContainsQuadruple(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Checks if the store contains the given quadruple
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.SelectQuadruples(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Gets a store containing quadruples satisfying the given pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.IntersectWith(RDFSharp.Store.RDFStore)">
            <summary>
            Builds a new intersection store from this store and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.UnionWith(RDFSharp.Store.RDFStore)">
            <summary>
            Builds a new union store from this store and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.DifferenceWith(RDFSharp.Store.RDFStore)">
            <summary>
            Builds a new difference store from this store and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.FromFile(RDFSharp.Store.RDFStoreEnums.RDFFormats,System.String)">
            <summary>
            Creates a memory store from a file of the given RDF format. 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.FromStream(RDFSharp.Store.RDFStoreEnums.RDFFormats,System.IO.Stream)">
            <summary>
            Creates a memory store from a stream of the given RDF format. 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.FromDataTable(System.Data.DataTable)">
            <summary>
            Creates a memory store from a datatable with "Context-Subject-Predicate-Object" columns.
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFSQLServerStore">
            <summary>
            RDFSQLServerStore represents a RDFStore backed on SQL Server engine
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFSQLServerStore.Connection">
            <summary>
            Connection to the SQL Server database
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.#ctor(System.String)">
            <summary>
            Default-ctor to build a SQL Server store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.ToString">
            <summary>
            Gives the string representation of the SQL Server store 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.MergeGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Merges the given graph into the store within a single transaction, avoiding duplicate insertions
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.AddQuadruple(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Adds the given quadruple to the store, avoiding duplicate insertions
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.RemoveQuadruple(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Removes the given quadruples from the store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.RemoveQuadruplesByContext(RDFSharp.Store.RDFContext)">
            <summary>
            Removes the quadruples with the given context
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.RemoveQuadruplesBySubject(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given subject
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.RemoveQuadruplesByPredicate(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.RemoveQuadruplesByObject(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given resource as object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.RemoveQuadruplesByLiteral(RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given literal as object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.RemoveQuadruplesByContextSubject(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context and subject
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.RemoveQuadruplesByContextPredicate(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context and predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.RemoveQuadruplesByContextObject(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context and object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.RemoveQuadruplesByContextLiteral(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given context and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.RemoveQuadruplesByContextSubjectPredicate(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context, subject and predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.RemoveQuadruplesByContextSubjectObject(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context, subject and object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.RemoveQuadruplesByContextSubjectLiteral(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given context, subject and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.RemoveQuadruplesByContextPredicateObject(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context, predicate and object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.RemoveQuadruplesByContextPredicateLiteral(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given context, predicate and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.RemoveQuadruplesBySubjectPredicate(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given subject and predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.RemoveQuadruplesBySubjectObject(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given subject and object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.RemoveQuadruplesBySubjectLiteral(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given subject and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.RemoveQuadruplesByPredicateObject(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given predicate and object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.RemoveQuadruplesByPredicateLiteral(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given predicate and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.ClearQuadruples">
            <summary>
            Clears the quadruples of the store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.SelectQuadruples(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Gets a memory store containing quadruples satisfying the given pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.Diagnostics">
            <summary>
            Performs the preliminary diagnostics controls on the underlying SQL Server database
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.PrepareStore">
            <summary>
            Prepares the underlying SQL Server database
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.OptimizeStore">
            <summary>
            Executes a special command to optimize SQL Server store
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFContext">
            <summary>
            RDFContext represents an object which can act as C-token of a pattern. 
            It cannot start with "bnode:" because blank contexts are not supported.
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFContext.Context">
            <summary>
            Uri representing the context of the pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFContext.#ctor">
            <summary>
            Default-ctor to build a predefined context
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFContext.#ctor(System.String)">
            <summary>
            String-based ctor to build a context from the given string 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFContext.#ctor(System.Uri)">
            <summary>
            Uri-based ctor to build a context from the given Uri
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFContext.ToString">
            <summary>
            Gives the string representation of the store context
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFFederation">
            <summary>
            RDFFederation represents a virtual store giving logically integrated query access to multiple stores.
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFFederation.FederationName">
            <summary>
            Name of the federation
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFFederation.StoresCount">
            <summary>
            Count of the federation' stores
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFFederation.StoresEnumerator">
            <summary>
            Gets the enumerator on the federation' stores for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFFederation.Stores">
            <summary>
            List of stores embedded into the federation
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFFederation.#ctor">
            <summary>
            Default ctor to build an empty federation
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFFederation.ToString">
            <summary>
            Gives the string representation of the federation
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFFederation.Equals(RDFSharp.Store.RDFFederation)">
            <summary>
            Performs the equality comparison between two federations
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFFederation.System#Collections#Generic#IEnumerable{RDFSharp#Store#RDFStore}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the federation'stores
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFFederation.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the federation'stores
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFFederation.AddStore(RDFSharp.Store.RDFStore)">
            <summary>
            Adds the store to the federation, avoiding duplicate insertions
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFFederation.RemoveStore(RDFSharp.Store.RDFStore)">
            <summary>
            Removes the store from the federation 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFFederation.ClearStores">
            <summary>
            Clears the stores of the federation.
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFQuadruple">
            <summary>
            RDFQuadruple represents a quadruple in the RDF store.
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFQuadruple.QuadrupleID">
            <summary>
            Unique representation of the quadruple
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFQuadruple.TripleFlavor">
            <summary>
            Flavor of the triple nested into the quadruple
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFQuadruple.Context">
            <summary>
            Member acting as context token of the quadruple
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFQuadruple.Subject">
            <summary>
            Member acting as subject token of the quadruple
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFQuadruple.Predicate">
            <summary>
            Member acting as predicate token of the quadruple
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFQuadruple.Object">
            <summary>
            Member acting as object token of the quadruple
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFQuadruple.ReificationSubject">
            <summary>
            Subject of the quadruple's reification
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFQuadruple.#ctor(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            SPO-flavor ctor
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFQuadruple.#ctor(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            SPL-flavor ctor
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFQuadruple.ToString">
            <summary>
            Gives the string representation of the quadruple
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFQuadruple.Equals(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Performs the equality comparison between two quadruples
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFQuadruple.ReifyQuadruple">
            <summary>
            Builds the reification store of the quadruple
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStore">
            <summary>
            RDFStore represents an abstract store in the RDF model.
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFStore.StoreID">
            <summary>
            Unique representation of the store
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFStore.StoreType">
            <summary>
            Type of the store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.ToString">
            <summary>
            Gives the string representation of the store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.Equals(RDFSharp.Store.RDFStore)">
            <summary>
            Performs the equality comparison between two stores
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.MergeGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Merges the given graph into the store, avoiding duplicate insertions
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.AddQuadruple(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Adds the given quadruple to the store, avoiding duplicate insertions
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruple(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Removes the given quadruples from the store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByContext(RDFSharp.Store.RDFContext)">
            <summary>
            Removes the quadruples with the given context
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesBySubject(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given subject
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByPredicate(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given (non-blank) predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByObject(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given resource as object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByLiteral(RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given literal as object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByContextSubject(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context and subject
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByContextPredicate(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context and predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByContextObject(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context and object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByContextLiteral(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given context and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByContextSubjectPredicate(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context, subject and predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByContextSubjectObject(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context, subject and object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByContextSubjectLiteral(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given context, subject and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByContextPredicateObject(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context, predicate and object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByContextPredicateLiteral(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given context, predicate and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesBySubjectPredicate(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given subject and predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesBySubjectObject(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given subject and object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesBySubjectLiteral(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given subject and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByPredicateObject(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given predicate and object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByPredicateLiteral(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given predicate and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.ClearQuadruples">
            <summary>
            Clears the quadruples of the store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.UnreifyQuadruples">
            <summary>
            Compacts the reified quadruples by removing their 4 standard statements 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.ExtractGraphs">
            <summary>
            Gets a list containing the graphs saved in the store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.ContainsQuadruple(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Checks if the store contains the given quadruple
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.SelectAllQuadruples">
            <summary>
            Gets a store containing all quadruples
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.SelectQuadruplesByContext(RDFSharp.Store.RDFContext)">
            <summary>
            Gets a memory store containing quadruples with the specified context
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.SelectQuadruplesBySubject(RDFSharp.Model.RDFResource)">
            <summary>
            Gets a memory store containing quadruples with the specified subject
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.SelectQuadruplesByPredicate(RDFSharp.Model.RDFResource)">
            <summary>
            Gets a memory store containing quadruples with the specified predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.SelectQuadruplesByObject(RDFSharp.Model.RDFResource)">
            <summary>
            Gets a memory store containing quadruples with the specified object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.SelectQuadruplesByLiteral(RDFSharp.Model.RDFLiteral)">
            <summary>
            Gets a memory store containing quadruples with the specified literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.SelectQuadruples(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Gets a store containing quadruples satisfying the given pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.ToFile(RDFSharp.Store.RDFStoreEnums.RDFFormats,System.String)">
            <summary>
            Writes the store into a file in the given RDF format. 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.ToStream(RDFSharp.Store.RDFStoreEnums.RDFFormats,System.IO.Stream)">
            <summary>
            Writes the store into a stream in the given RDF format. 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.ToDataTable">
            <summary>
            Writes the store into a datatable with "Context-Subject-Predicate-Object" columns
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreEnums">
            <summary>
            RDFStoreEnums represents a collector for all the enumerations used by the "RDFSharp.Store" namespace
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreEnums.RDFStoreSQLErrors">
            <summary>
            RDFStoreSQLErrors represents an enumeration for situations which can be found on a SQL-backing store
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFStoreEnums.RDFStoreSQLErrors.NoErrors">
            <summary>
            Indicates that diagnostics on the selected database has passed
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFStoreEnums.RDFStoreSQLErrors.InvalidDataSource">
            <summary>
            Indicates that diagnostics on the selected database has not passed because of a connection error
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFStoreEnums.RDFStoreSQLErrors.QuadruplesTableNotFound">
            <summary>
            Indicates that diagnostics on the selected database has not passed because it's not ready for use with RDFSharp
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreEnums.RDFFormats">
            <summary>
            RDFFormats represents an enumeration for supported RDF store serialization data formats.
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFStoreEnums.RDFFormats.NQuads">
            <summary>
            N-Quads serialization
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFStoreEnums.RDFFormats.TriX">
            <summary>
            TriX serialization
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreEvents">
            <summary>
            RDFStoreEvents represents a collector for all the events generated within the "RDFSharp.Store" namespace
            </summary>
        </member>
        <member name="E:RDFSharp.Store.RDFStoreEvents.OnQuadrupleAdded">
            <summary>
            Event representing an information message generated when a quadruple has been added to a store
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreEvents.RDFOnQuadrupleAddedEventHandler">
            <summary>
            Delegate to handle information events generated when a quadruple has been added to a store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreEvents.RaiseOnQuadrupleAdded(System.String)">
            <summary>
            Internal invoker of the subscribed information event handler
            </summary>
        </member>
        <member name="E:RDFSharp.Store.RDFStoreEvents.OnQuadrupleRemoved">
            <summary>
            Event representing an information message generated when a quadruple has been removed to a store
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreEvents.RDFOnQuadrupleRemovedEventHandler">
            <summary>
            Delegate to handle information events generated when a quadruple has been removed to a store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreEvents.RaiseOnQuadrupleRemoved(System.String)">
            <summary>
            Internal invoker of the subscribed information event handler
            </summary>
        </member>
        <member name="E:RDFSharp.Store.RDFStoreEvents.OnStoreCleared">
            <summary>
            Event representing an information message generated when a store has been cleared
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreEvents.RDFOnStoreClearedEventHandler">
            <summary>
            Delegate to handle information events generated when a store has been cleared
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreEvents.RaiseOnStoreCleared(System.String)">
            <summary>
            Internal invoker of the subscribed information event handler
            </summary>
        </member>
        <member name="E:RDFSharp.Store.RDFStoreEvents.OnStoreInitialized">
            <summary>
            Event representing an information message generated when a store has been initialized
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreEvents.RDFOnStoreInitializedEventHandler">
            <summary>
            Delegate to handle information events generated when a store has been initialized
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreEvents.RaiseOnStoreInitialized(System.String)">
            <summary>
            Internal invoker of the subscribed information event handler
            </summary>
        </member>
        <member name="E:RDFSharp.Store.RDFStoreEvents.OnStoreOptimized">
            <summary>
            Event representing an information message generated when a store has been optimized
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreEvents.RDFOnStoreOptimizedEventHandler">
            <summary>
            Delegate to handle information events generated when a store has been optimized
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreEvents.RaiseOnStoreOptimized(System.String)">
            <summary>
            Internal invoker of the subscribed information event handler
            </summary>
        </member>
        <member name="E:RDFSharp.Store.RDFStoreEvents.OnStoreAdded">
            <summary>
            Event representing an information message generated when a store has been added to a federation
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreEvents.RDFOnStoreAddedEventHandler">
            <summary>
            Delegate to handle information events generated when a store has been added to a federation
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreEvents.RaiseOnStoreAdded(System.String)">
            <summary>
            Internal invoker of the subscribed information event handler
            </summary>
        </member>
        <member name="E:RDFSharp.Store.RDFStoreEvents.OnStoreRemoved">
            <summary>
            Event representing an information message generated when a store has been removed from a federation
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreEvents.RDFOnStoreRemovedEventHandler">
            <summary>
            Delegate to handle information events generated when a store has been removed from a federation
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreEvents.RaiseOnStoreRemoved(System.String)">
            <summary>
            Internal invoker of the subscribed information event handler
            </summary>
        </member>
        <member name="E:RDFSharp.Store.RDFStoreEvents.OnFederationCleared">
            <summary>
            Event representing an information message generated when a federation has been cleared
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreEvents.RDFOnFederationClearedEventHandler">
            <summary>
            Delegate to handle information events generated when a federation has been cleared
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreEvents.RaiseOnFederationCleared(System.String)">
            <summary>
            Internal invoker of the subscribed information event handler
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreException">
            <summary>
            RDFStoreException represents an exception thrown during manipulation of RDF data stores.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreException.#ctor">
            <summary>
            Basic ctor to throw an empty RDFStoreException
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreException.#ctor(System.String)">
            <summary>
            Basic ctor to throw an RDFStoreException with message
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreException.#ctor(System.String,System.Exception)">
            <summary>
            Basic ctor to throw an RDFStoreException with message and inner exception
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Basic ctor to support serialization of a remotely thrown RDFStoreException
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreIndex">
            <summary>
            RDFStoreIndex represents an automatically managed in-memory index structure for the quadruples of a store.
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFStoreIndex.Contexts">
            <summary>
            Index on the contexts of the store's quadruples
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFStoreIndex.Subjects">
            <summary>
            Index on the subjects of the store's quadruples
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFStoreIndex.Predicates">
            <summary>
            Index on the predicates of the store's quadruples
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFStoreIndex.Objects">
            <summary>
            Index on the objects of the store's quadruples
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFStoreIndex.Literals">
            <summary>
            Index on the literals of the store's quadruples
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreIndex.#ctor">
            <summary>
            Default-ctor for an empty store index
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreIndex.AddIndex(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Adds the given quadruple to the CSPOL index
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreIndex.RemoveIndex(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Removes the given quadruple from the CSPOL index
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreIndex.ClearIndex">
            <summary>
            Clears the index
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreIndex.SelectIndexByContext(RDFSharp.Store.RDFContext)">
            <summary>
            Selects the quadruples indexed by the given context
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreIndex.SelectIndexBySubject(RDFSharp.Model.RDFResource)">
            <summary>
            Selects the quadruples indexed by the given subject
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreIndex.SelectIndexByPredicate(RDFSharp.Model.RDFResource)">
            <summary>
            Selects the quadruples indexed by the given predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreIndex.SelectIndexByObject(RDFSharp.Model.RDFResource)">
            <summary>
            Selects the quadruples indexed by the given object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreIndex.SelectIndexByLiteral(RDFSharp.Model.RDFLiteral)">
            <summary>
            Selects the quadruples indexed by the given literal
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreUtilities">
            <summary>
            RDFStoreUtilities is a collector of reusable utility methods for RDF store management
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreUtilities.ParseQuadruple(System.Data.IDataReader)">
            <summary>
            Parses the current quadruple of the data reader 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreUtilities.SelectQuadruples(RDFSharp.Store.RDFMemoryStore,RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Selects the quadruples corresponding to the given pattern from the given store
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFNQuads">
            <summary>
            RDFNQuads is responsible for managing serialization to and from N-Quads data format.
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFNQuads.SPBC">
            <summary>
            Regex to detect S->P->B->C form of N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFNQuads.SPOC">
            <summary>
            Regex to detect S->P->O->C form of N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFNQuads.SPLC_PLAIN">
            <summary>
            Regex to detect S->P->L(PLAIN)->C form of N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFNQuads.SPLC_PLANG">
            <summary>
            Regex to detect S->P->L(PLAIN LANGUAGE)->C form of N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFNQuads.SPLC_TLIT">
            <summary>
            Regex to detect S->P->B->L(TYPED) form of N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFNQuads.BPBC">
            <summary>
            Regex to detect B->P->B->C form of N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFNQuads.BPOC">
            <summary>
            Regex to detect B->P->O->C form of N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFNQuads.BPLC_PLAIN">
            <summary>
            Regex to detect B->P->L(PLAIN)->C form of N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFNQuads.BPLC_PLANG">
            <summary>
            Regex to detect B->P->L(PLAIN LANGUAGE)->C form of N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFNQuads.BPLC_TLIT">
            <summary>
            Regex to detect B->P->L(TYPED)->C form of N-Quad
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFNQuads.Serialize(RDFSharp.Store.RDFStore,System.String)">
            <summary>
            Serializes the given store to the given filepath using N-Quads data format. 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFNQuads.Serialize(RDFSharp.Store.RDFStore,System.IO.Stream)">
            <summary>
            Serializes the given store to the given filepath using N-Quads data format. 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFNQuads.Deserialize(System.String)">
            <summary>
            Deserializes the given N-Quads filepath to a memory store. 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFNQuads.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the given N-Quads stream to a memory store. 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFNQuads.TokenizeNQuad(System.String)">
            <summary>
            Tries to tokenize the given N-Quad
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFTriX">
            <summary>
            RDFTriX is responsible for managing serialization to and from TriX data format.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFTriX.Serialize(RDFSharp.Store.RDFStore,System.String)">
            <summary>
            Serializes the given store to the given filepath using TriX data format. 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFTriX.Serialize(RDFSharp.Store.RDFStore,System.IO.Stream)">
            <summary>
            Serializes the given store to the given stream using TriX data format. 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFTriX.Deserialize(System.String)">
            <summary>
            Deserializes the given TriX filepath to a memory store. 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFTriX.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the given TriX stream to a memory store. 
            </summary>
        </member>
    </members>
</doc>
